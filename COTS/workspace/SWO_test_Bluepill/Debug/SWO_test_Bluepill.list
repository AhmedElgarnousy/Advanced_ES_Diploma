
SWO_test_Bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001780  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a64  08001a64  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08001a64  08001a64  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a64  08001a64  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a64  08001a64  00011a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a68  08001a68  00011a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08001a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200000a8  08001b14  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001b14  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b57  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d1  00000000  00000000  00020c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00021000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00021140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c74  00000000  00000000  00021248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001505  00000000  00000000  00023ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000940f  00000000  00000000  000253c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e7d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f5c  00000000  00000000  0002e820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a8 	.word	0x200000a8
 800014c:	00000000 	.word	0x00000000
 8000150:	08001898 	.word	0x08001898

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000ac 	.word	0x200000ac
 800016c:	08001898 	.word	0x08001898

08000170 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData ;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
 800017e:	e015      	b.n	80001ac <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000180:	f000 fb04 	bl	800078c <rand>
 8000184:	4602      	mov	r2, r0
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	6879      	ldr	r1, [r7, #4]
 800018c:	4419      	add	r1, r3
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <array_fill_numbers+0x50>)
 8000190:	fb83 0302 	smull	r0, r3, r3, r2
 8000194:	1198      	asrs	r0, r3, #6
 8000196:	17d3      	asrs	r3, r2, #31
 8000198:	1ac3      	subs	r3, r0, r3
 800019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019e:	fb00 f303 	mul.w	r3, r0, r3
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	3301      	adds	r3, #1
 80001aa:	60fb      	str	r3, [r7, #12]
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d3e5      	bcc.n	8000180 <array_fill_numbers+0x10>
    }

}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	10624dd3 	.word	0x10624dd3

080001c4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
	someData=10;
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <display_numbers+0x50>)
 80001d2:	220a      	movs	r2, #10
 80001d4:	601a      	str	r2, [r3, #0]
    printf("%s",pMessage);
 80001d6:	6879      	ldr	r1, [r7, #4]
 80001d8:	480f      	ldr	r0, [pc, #60]	; (8000218 <display_numbers+0x54>)
 80001da:	f000 fa35 	bl	8000648 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e00b      	b.n	80001fc <display_numbers+0x38>
    {
        printf("%5d  ",pNumbers[i]);
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	4413      	add	r3, r2
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4619      	mov	r1, r3
 80001f0:	480a      	ldr	r0, [pc, #40]	; (800021c <display_numbers+0x58>)
 80001f2:	f000 fa29 	bl	8000648 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	3301      	adds	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
 80001fc:	697a      	ldr	r2, [r7, #20]
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3ef      	bcc.n	80001e4 <display_numbers+0x20>
    }

    printf("\n");
 8000204:	200a      	movs	r0, #10
 8000206:	f000 fa37 	bl	8000678 <putchar>
}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	200000c4 	.word	0x200000c4
 8000218:	080018b0 	.word	0x080018b0
 800021c:	080018b4 	.word	0x080018b4

08000220 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	//void (*FuncPtr)(void)=(void*)0x20000008;
	//FuncPtr();
     int temp=*x;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	601a      	str	r2, [r3, #0]
     *y=temp;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	601a      	str	r2, [r3, #0]

}
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	e02f      	b.n	80002bc <bubble_sort+0x74>
    {
        flag=0;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	e01d      	b.n	80002a2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	3301      	adds	r3, #1
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	6879      	ldr	r1, [r7, #4]
 8000278:	440b      	add	r3, r1
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	dd0d      	ble.n	800029c <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	18d0      	adds	r0, r2, r3
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	3301      	adds	r3, #1
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	4413      	add	r3, r2
 8000292:	4619      	mov	r1, r3
 8000294:	f7ff ffc4 	bl	8000220 <swap_numbers>
                flag=1;
 8000298:	2301      	movs	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	3301      	adds	r3, #1
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	1e5a      	subs	r2, r3, #1
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d8da      	bhi.n	8000266 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d008      	beq.n	80002c8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d8ca      	bhi.n	800025c <bubble_sort+0x14>
            break;
    }
}
 80002c6:	e000      	b.n	80002ca <bubble_sort+0x82>
            break;
 80002c8:	bf00      	nop
}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b087      	sub	sp, #28
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	e02c      	b.n	800033c <insertion_sort+0x6a>
     {
         j=i-1;
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 80002f4:	e00d      	b.n	8000312 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	441a      	add	r2, r3
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	3301      	adds	r3, #1
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	440b      	add	r3, r1
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	601a      	str	r2, [r3, #0]
             j--;
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	3b01      	subs	r3, #1
 8000310:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b00      	cmp	r3, #0
 8000316:	db07      	blt.n	8000328 <insertion_sort+0x56>
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbe6      	blt.n	80002f6 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	3301      	adds	r3, #1
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d8ce      	bhi.n	80002e2 <insertion_sort+0x10>
     }


}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	371c      	adds	r7, #28
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <main>:



int main()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 8000356:	2311      	movs	r3, #17
 8000358:	607b      	str	r3, [r7, #4]

    printf("Hello World\r\n");
 800035a:	4814      	ldr	r0, [pc, #80]	; (80003ac <main+0x5c>)
 800035c:	f000 fa0e 	bl	800077c <puts>

    array_fill_numbers(numbers,len);
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	4813      	ldr	r0, [pc, #76]	; (80003b0 <main+0x60>)
 8000364:	f7ff ff04 	bl	8000170 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000368:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <main+0x64>)
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	4810      	ldr	r0, [pc, #64]	; (80003b0 <main+0x60>)
 800036e:	f7ff ff29 	bl	80001c4 <display_numbers>

    bubble_sort(numbers,len);
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <main+0x60>)
 8000376:	f7ff ff67 	bl	8000248 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 800037a:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <main+0x68>)
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	480c      	ldr	r0, [pc, #48]	; (80003b0 <main+0x60>)
 8000380:	f7ff ff20 	bl	80001c4 <display_numbers>

    array_fill_numbers(numbers,len);
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	480a      	ldr	r0, [pc, #40]	; (80003b0 <main+0x60>)
 8000388:	f7ff fef2 	bl	8000170 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <main+0x6c>)
 800038e:	6879      	ldr	r1, [r7, #4]
 8000390:	4807      	ldr	r0, [pc, #28]	; (80003b0 <main+0x60>)
 8000392:	f7ff ff17 	bl	80001c4 <display_numbers>

    insertion_sort(numbers,len);
 8000396:	6879      	ldr	r1, [r7, #4]
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <main+0x60>)
 800039a:	f7ff ff9a 	bl	80002d2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <main+0x70>)
 80003a0:	6879      	ldr	r1, [r7, #4]
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <main+0x60>)
 80003a4:	f7ff ff0e 	bl	80001c4 <display_numbers>

    /* Loop forever */
	for(;;);
 80003a8:	e7fe      	b.n	80003a8 <main+0x58>
 80003aa:	bf00      	nop
 80003ac:	080018bc 	.word	0x080018bc
 80003b0:	20000000 	.word	0x20000000
 80003b4:	080018cc 	.word	0x080018cc
 80003b8:	080018e0 	.word	0x080018e0
 80003bc:	080018f4 	.word	0x080018f4
 80003c0:	08001908 	.word	0x08001908

080003c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <ITM_SendChar+0x44>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <ITM_SendChar+0x44>)
 80003d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <ITM_SendChar+0x48>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <ITM_SendChar+0x48>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003e6:	bf00      	nop
 80003e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f8      	beq.n	80003e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	e000edfc 	.word	0xe000edfc
 800040c:	e0000e00 	.word	0xe0000e00

08000410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return 1;
 8000414:	2301      	movs	r3, #1
}
 8000416:	4618      	mov	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <_kill>:

int _kill(int pid, int sig)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000428:	f000 f8dc 	bl	80005e4 <__errno>
 800042c:	4603      	mov	r3, r0
 800042e:	2216      	movs	r2, #22
 8000430:	601a      	str	r2, [r3, #0]
  return -1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000436:	4618      	mov	r0, r3
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_exit>:

void _exit (int status)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000446:	f04f 31ff 	mov.w	r1, #4294967295
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffe7 	bl	800041e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000450:	e7fe      	b.n	8000450 <_exit+0x12>

08000452 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	60f8      	str	r0, [r7, #12]
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	e00a      	b.n	800047a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000464:	f3af 8000 	nop.w
 8000468:	4601      	mov	r1, r0
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	60ba      	str	r2, [r7, #8]
 8000470:	b2ca      	uxtb	r2, r1
 8000472:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	3301      	adds	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	429a      	cmp	r2, r3
 8000480:	dbf0      	blt.n	8000464 <_read+0x12>
  }

  return len;
 8000482:	687b      	ldr	r3, [r7, #4]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e009      	b.n	80004b2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	1c5a      	adds	r2, r3, #1
 80004a2:	60ba      	str	r2, [r7, #8]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff8c 	bl	80003c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	3301      	adds	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dbf1      	blt.n	800049e <_write+0x12>
  }
  return len;
 80004ba:	687b      	ldr	r3, [r7, #4]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <_close>:

int _close(int file)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ea:	605a      	str	r2, [r3, #4]
  return 0;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <_isatty>:

int _isatty(int file)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <_sbrk+0x5c>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_sbrk+0x60>)
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x64>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <_sbrk+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	429a      	cmp	r2, r3
 8000552:	d207      	bcs.n	8000564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000554:	f000 f846 	bl	80005e4 <__errno>
 8000558:	4603      	mov	r3, r0
 800055a:	220c      	movs	r2, #12
 800055c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	e009      	b.n	8000578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <_sbrk+0x64>)
 8000574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20005000 	.word	0x20005000
 8000584:	00000400 	.word	0x00000400
 8000588:	200000c8 	.word	0x200000c8
 800058c:	200000e0 	.word	0x200000e0

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 f817 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fec5 	bl	8000350 <main>

080005c6 <LoopForever>:

LoopForever:
  b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80005d4:	08001a6c 	.word	0x08001a6c
  ldr r2, =_sbss
 80005d8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80005dc:	200000dc 	.word	0x200000dc

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <__errno>:
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <__errno+0x8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000044 	.word	0x20000044

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2600      	movs	r6, #0
 80005f4:	4d0c      	ldr	r5, [pc, #48]	; (8000628 <__libc_init_array+0x38>)
 80005f6:	4c0d      	ldr	r4, [pc, #52]	; (800062c <__libc_init_array+0x3c>)
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	f001 f94a 	bl	8001898 <_init>
 8000604:	2600      	movs	r6, #0
 8000606:	4d0a      	ldr	r5, [pc, #40]	; (8000630 <__libc_init_array+0x40>)
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <__libc_init_array+0x44>)
 800060a:	1b64      	subs	r4, r4, r5
 800060c:	10a4      	asrs	r4, r4, #2
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08001a64 	.word	0x08001a64
 800062c:	08001a64 	.word	0x08001a64
 8000630:	08001a64 	.word	0x08001a64
 8000634:	08001a68 	.word	0x08001a68

08000638 <memset>:
 8000638:	4603      	mov	r3, r0
 800063a:	4402      	add	r2, r0
 800063c:	4293      	cmp	r3, r2
 800063e:	d100      	bne.n	8000642 <memset+0xa>
 8000640:	4770      	bx	lr
 8000642:	f803 1b01 	strb.w	r1, [r3], #1
 8000646:	e7f9      	b.n	800063c <memset+0x4>

08000648 <iprintf>:
 8000648:	b40f      	push	{r0, r1, r2, r3}
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <iprintf+0x2c>)
 800064c:	b513      	push	{r0, r1, r4, lr}
 800064e:	681c      	ldr	r4, [r3, #0]
 8000650:	b124      	cbz	r4, 800065c <iprintf+0x14>
 8000652:	69a3      	ldr	r3, [r4, #24]
 8000654:	b913      	cbnz	r3, 800065c <iprintf+0x14>
 8000656:	4620      	mov	r0, r4
 8000658:	f000 faca 	bl	8000bf0 <__sinit>
 800065c:	ab05      	add	r3, sp, #20
 800065e:	4620      	mov	r0, r4
 8000660:	9a04      	ldr	r2, [sp, #16]
 8000662:	68a1      	ldr	r1, [r4, #8]
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	f000 fce7 	bl	8001038 <_vfiprintf_r>
 800066a:	b002      	add	sp, #8
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	b004      	add	sp, #16
 8000672:	4770      	bx	lr
 8000674:	20000044 	.word	0x20000044

08000678 <putchar>:
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <putchar+0x24>)
 800067c:	4605      	mov	r5, r0
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	b124      	cbz	r4, 800068c <putchar+0x14>
 8000682:	69a3      	ldr	r3, [r4, #24]
 8000684:	b913      	cbnz	r3, 800068c <putchar+0x14>
 8000686:	4620      	mov	r0, r4
 8000688:	f000 fab2 	bl	8000bf0 <__sinit>
 800068c:	4629      	mov	r1, r5
 800068e:	4620      	mov	r0, r4
 8000690:	68a2      	ldr	r2, [r4, #8]
 8000692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000696:	f000 bf95 	b.w	80015c4 <_putc_r>
 800069a:	bf00      	nop
 800069c:	20000044 	.word	0x20000044

080006a0 <_puts_r>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	460e      	mov	r6, r1
 80006a4:	4605      	mov	r5, r0
 80006a6:	b118      	cbz	r0, 80006b0 <_puts_r+0x10>
 80006a8:	6983      	ldr	r3, [r0, #24]
 80006aa:	b90b      	cbnz	r3, 80006b0 <_puts_r+0x10>
 80006ac:	f000 faa0 	bl	8000bf0 <__sinit>
 80006b0:	69ab      	ldr	r3, [r5, #24]
 80006b2:	68ac      	ldr	r4, [r5, #8]
 80006b4:	b913      	cbnz	r3, 80006bc <_puts_r+0x1c>
 80006b6:	4628      	mov	r0, r5
 80006b8:	f000 fa9a 	bl	8000bf0 <__sinit>
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <_puts_r+0xd0>)
 80006be:	429c      	cmp	r4, r3
 80006c0:	d120      	bne.n	8000704 <_puts_r+0x64>
 80006c2:	686c      	ldr	r4, [r5, #4]
 80006c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006c6:	07db      	lsls	r3, r3, #31
 80006c8:	d405      	bmi.n	80006d6 <_puts_r+0x36>
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	0598      	lsls	r0, r3, #22
 80006ce:	d402      	bmi.n	80006d6 <_puts_r+0x36>
 80006d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006d2:	f000 fb3d 	bl	8000d50 <__retarget_lock_acquire_recursive>
 80006d6:	89a3      	ldrh	r3, [r4, #12]
 80006d8:	0719      	lsls	r1, r3, #28
 80006da:	d51d      	bpl.n	8000718 <_puts_r+0x78>
 80006dc:	6923      	ldr	r3, [r4, #16]
 80006de:	b1db      	cbz	r3, 8000718 <_puts_r+0x78>
 80006e0:	3e01      	subs	r6, #1
 80006e2:	68a3      	ldr	r3, [r4, #8]
 80006e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006e8:	3b01      	subs	r3, #1
 80006ea:	60a3      	str	r3, [r4, #8]
 80006ec:	bb39      	cbnz	r1, 800073e <_puts_r+0x9e>
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da38      	bge.n	8000764 <_puts_r+0xc4>
 80006f2:	4622      	mov	r2, r4
 80006f4:	210a      	movs	r1, #10
 80006f6:	4628      	mov	r0, r5
 80006f8:	f000 f886 	bl	8000808 <__swbuf_r>
 80006fc:	3001      	adds	r0, #1
 80006fe:	d011      	beq.n	8000724 <_puts_r+0x84>
 8000700:	250a      	movs	r5, #10
 8000702:	e011      	b.n	8000728 <_puts_r+0x88>
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <_puts_r+0xd4>)
 8000706:	429c      	cmp	r4, r3
 8000708:	d101      	bne.n	800070e <_puts_r+0x6e>
 800070a:	68ac      	ldr	r4, [r5, #8]
 800070c:	e7da      	b.n	80006c4 <_puts_r+0x24>
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <_puts_r+0xd8>)
 8000710:	429c      	cmp	r4, r3
 8000712:	bf08      	it	eq
 8000714:	68ec      	ldreq	r4, [r5, #12]
 8000716:	e7d5      	b.n	80006c4 <_puts_r+0x24>
 8000718:	4621      	mov	r1, r4
 800071a:	4628      	mov	r0, r5
 800071c:	f000 f8c6 	bl	80008ac <__swsetup_r>
 8000720:	2800      	cmp	r0, #0
 8000722:	d0dd      	beq.n	80006e0 <_puts_r+0x40>
 8000724:	f04f 35ff 	mov.w	r5, #4294967295
 8000728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800072a:	07da      	lsls	r2, r3, #31
 800072c:	d405      	bmi.n	800073a <_puts_r+0x9a>
 800072e:	89a3      	ldrh	r3, [r4, #12]
 8000730:	059b      	lsls	r3, r3, #22
 8000732:	d402      	bmi.n	800073a <_puts_r+0x9a>
 8000734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000736:	f000 fb0c 	bl	8000d52 <__retarget_lock_release_recursive>
 800073a:	4628      	mov	r0, r5
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	2b00      	cmp	r3, #0
 8000740:	da04      	bge.n	800074c <_puts_r+0xac>
 8000742:	69a2      	ldr	r2, [r4, #24]
 8000744:	429a      	cmp	r2, r3
 8000746:	dc06      	bgt.n	8000756 <_puts_r+0xb6>
 8000748:	290a      	cmp	r1, #10
 800074a:	d004      	beq.n	8000756 <_puts_r+0xb6>
 800074c:	6823      	ldr	r3, [r4, #0]
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	6022      	str	r2, [r4, #0]
 8000752:	7019      	strb	r1, [r3, #0]
 8000754:	e7c5      	b.n	80006e2 <_puts_r+0x42>
 8000756:	4622      	mov	r2, r4
 8000758:	4628      	mov	r0, r5
 800075a:	f000 f855 	bl	8000808 <__swbuf_r>
 800075e:	3001      	adds	r0, #1
 8000760:	d1bf      	bne.n	80006e2 <_puts_r+0x42>
 8000762:	e7df      	b.n	8000724 <_puts_r+0x84>
 8000764:	250a      	movs	r5, #10
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	6022      	str	r2, [r4, #0]
 800076c:	701d      	strb	r5, [r3, #0]
 800076e:	e7db      	b.n	8000728 <_puts_r+0x88>
 8000770:	080019f0 	.word	0x080019f0
 8000774:	08001a10 	.word	0x08001a10
 8000778:	080019d0 	.word	0x080019d0

0800077c <puts>:
 800077c:	4b02      	ldr	r3, [pc, #8]	; (8000788 <puts+0xc>)
 800077e:	4601      	mov	r1, r0
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	f7ff bf8d 	b.w	80006a0 <_puts_r>
 8000786:	bf00      	nop
 8000788:	20000044 	.word	0x20000044

0800078c <rand>:
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <rand+0x5c>)
 800078e:	b510      	push	{r4, lr}
 8000790:	681c      	ldr	r4, [r3, #0]
 8000792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000794:	b9b3      	cbnz	r3, 80007c4 <rand+0x38>
 8000796:	2018      	movs	r0, #24
 8000798:	f000 fb42 	bl	8000e20 <malloc>
 800079c:	4602      	mov	r2, r0
 800079e:	63a0      	str	r0, [r4, #56]	; 0x38
 80007a0:	b920      	cbnz	r0, 80007ac <rand+0x20>
 80007a2:	214e      	movs	r1, #78	; 0x4e
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <rand+0x60>)
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <rand+0x64>)
 80007a8:	f000 f8ee 	bl	8000988 <__assert_func>
 80007ac:	4911      	ldr	r1, [pc, #68]	; (80007f4 <rand+0x68>)
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <rand+0x6c>)
 80007b0:	e9c0 1300 	strd	r1, r3, [r0]
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <rand+0x70>)
 80007b6:	2100      	movs	r1, #0
 80007b8:	6083      	str	r3, [r0, #8]
 80007ba:	230b      	movs	r3, #11
 80007bc:	8183      	strh	r3, [r0, #12]
 80007be:	2001      	movs	r0, #1
 80007c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80007c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <rand+0x74>)
 80007c8:	6920      	ldr	r0, [r4, #16]
 80007ca:	6963      	ldr	r3, [r4, #20]
 80007cc:	4342      	muls	r2, r0
 80007ce:	490d      	ldr	r1, [pc, #52]	; (8000804 <rand+0x78>)
 80007d0:	fb01 2203 	mla	r2, r1, r3, r2
 80007d4:	fba0 0101 	umull	r0, r1, r0, r1
 80007d8:	1c43      	adds	r3, r0, #1
 80007da:	eb42 0001 	adc.w	r0, r2, r1
 80007de:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80007e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80007e6:	bd10      	pop	{r4, pc}
 80007e8:	20000044 	.word	0x20000044
 80007ec:	08001920 	.word	0x08001920
 80007f0:	08001937 	.word	0x08001937
 80007f4:	abcd330e 	.word	0xabcd330e
 80007f8:	e66d1234 	.word	0xe66d1234
 80007fc:	0005deec 	.word	0x0005deec
 8000800:	5851f42d 	.word	0x5851f42d
 8000804:	4c957f2d 	.word	0x4c957f2d

08000808 <__swbuf_r>:
 8000808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080a:	460e      	mov	r6, r1
 800080c:	4614      	mov	r4, r2
 800080e:	4605      	mov	r5, r0
 8000810:	b118      	cbz	r0, 800081a <__swbuf_r+0x12>
 8000812:	6983      	ldr	r3, [r0, #24]
 8000814:	b90b      	cbnz	r3, 800081a <__swbuf_r+0x12>
 8000816:	f000 f9eb 	bl	8000bf0 <__sinit>
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <__swbuf_r+0x98>)
 800081c:	429c      	cmp	r4, r3
 800081e:	d12b      	bne.n	8000878 <__swbuf_r+0x70>
 8000820:	686c      	ldr	r4, [r5, #4]
 8000822:	69a3      	ldr	r3, [r4, #24]
 8000824:	60a3      	str	r3, [r4, #8]
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	071a      	lsls	r2, r3, #28
 800082a:	d52f      	bpl.n	800088c <__swbuf_r+0x84>
 800082c:	6923      	ldr	r3, [r4, #16]
 800082e:	b36b      	cbz	r3, 800088c <__swbuf_r+0x84>
 8000830:	6923      	ldr	r3, [r4, #16]
 8000832:	6820      	ldr	r0, [r4, #0]
 8000834:	b2f6      	uxtb	r6, r6
 8000836:	1ac0      	subs	r0, r0, r3
 8000838:	6963      	ldr	r3, [r4, #20]
 800083a:	4637      	mov	r7, r6
 800083c:	4283      	cmp	r3, r0
 800083e:	dc04      	bgt.n	800084a <__swbuf_r+0x42>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f940 	bl	8000ac8 <_fflush_r>
 8000848:	bb30      	cbnz	r0, 8000898 <__swbuf_r+0x90>
 800084a:	68a3      	ldr	r3, [r4, #8]
 800084c:	3001      	adds	r0, #1
 800084e:	3b01      	subs	r3, #1
 8000850:	60a3      	str	r3, [r4, #8]
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	6022      	str	r2, [r4, #0]
 8000858:	701e      	strb	r6, [r3, #0]
 800085a:	6963      	ldr	r3, [r4, #20]
 800085c:	4283      	cmp	r3, r0
 800085e:	d004      	beq.n	800086a <__swbuf_r+0x62>
 8000860:	89a3      	ldrh	r3, [r4, #12]
 8000862:	07db      	lsls	r3, r3, #31
 8000864:	d506      	bpl.n	8000874 <__swbuf_r+0x6c>
 8000866:	2e0a      	cmp	r6, #10
 8000868:	d104      	bne.n	8000874 <__swbuf_r+0x6c>
 800086a:	4621      	mov	r1, r4
 800086c:	4628      	mov	r0, r5
 800086e:	f000 f92b 	bl	8000ac8 <_fflush_r>
 8000872:	b988      	cbnz	r0, 8000898 <__swbuf_r+0x90>
 8000874:	4638      	mov	r0, r7
 8000876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <__swbuf_r+0x9c>)
 800087a:	429c      	cmp	r4, r3
 800087c:	d101      	bne.n	8000882 <__swbuf_r+0x7a>
 800087e:	68ac      	ldr	r4, [r5, #8]
 8000880:	e7cf      	b.n	8000822 <__swbuf_r+0x1a>
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <__swbuf_r+0xa0>)
 8000884:	429c      	cmp	r4, r3
 8000886:	bf08      	it	eq
 8000888:	68ec      	ldreq	r4, [r5, #12]
 800088a:	e7ca      	b.n	8000822 <__swbuf_r+0x1a>
 800088c:	4621      	mov	r1, r4
 800088e:	4628      	mov	r0, r5
 8000890:	f000 f80c 	bl	80008ac <__swsetup_r>
 8000894:	2800      	cmp	r0, #0
 8000896:	d0cb      	beq.n	8000830 <__swbuf_r+0x28>
 8000898:	f04f 37ff 	mov.w	r7, #4294967295
 800089c:	e7ea      	b.n	8000874 <__swbuf_r+0x6c>
 800089e:	bf00      	nop
 80008a0:	080019f0 	.word	0x080019f0
 80008a4:	08001a10 	.word	0x08001a10
 80008a8:	080019d0 	.word	0x080019d0

080008ac <__swsetup_r>:
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <__swsetup_r+0xcc>)
 80008ae:	b570      	push	{r4, r5, r6, lr}
 80008b0:	681d      	ldr	r5, [r3, #0]
 80008b2:	4606      	mov	r6, r0
 80008b4:	460c      	mov	r4, r1
 80008b6:	b125      	cbz	r5, 80008c2 <__swsetup_r+0x16>
 80008b8:	69ab      	ldr	r3, [r5, #24]
 80008ba:	b913      	cbnz	r3, 80008c2 <__swsetup_r+0x16>
 80008bc:	4628      	mov	r0, r5
 80008be:	f000 f997 	bl	8000bf0 <__sinit>
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <__swsetup_r+0xd0>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d10f      	bne.n	80008e8 <__swsetup_r+0x3c>
 80008c8:	686c      	ldr	r4, [r5, #4]
 80008ca:	89a3      	ldrh	r3, [r4, #12]
 80008cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008d0:	0719      	lsls	r1, r3, #28
 80008d2:	d42c      	bmi.n	800092e <__swsetup_r+0x82>
 80008d4:	06dd      	lsls	r5, r3, #27
 80008d6:	d411      	bmi.n	80008fc <__swsetup_r+0x50>
 80008d8:	2309      	movs	r3, #9
 80008da:	6033      	str	r3, [r6, #0]
 80008dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	81a3      	strh	r3, [r4, #12]
 80008e6:	e03e      	b.n	8000966 <__swsetup_r+0xba>
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <__swsetup_r+0xd4>)
 80008ea:	429c      	cmp	r4, r3
 80008ec:	d101      	bne.n	80008f2 <__swsetup_r+0x46>
 80008ee:	68ac      	ldr	r4, [r5, #8]
 80008f0:	e7eb      	b.n	80008ca <__swsetup_r+0x1e>
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <__swsetup_r+0xd8>)
 80008f4:	429c      	cmp	r4, r3
 80008f6:	bf08      	it	eq
 80008f8:	68ec      	ldreq	r4, [r5, #12]
 80008fa:	e7e6      	b.n	80008ca <__swsetup_r+0x1e>
 80008fc:	0758      	lsls	r0, r3, #29
 80008fe:	d512      	bpl.n	8000926 <__swsetup_r+0x7a>
 8000900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000902:	b141      	cbz	r1, 8000916 <__swsetup_r+0x6a>
 8000904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000908:	4299      	cmp	r1, r3
 800090a:	d002      	beq.n	8000912 <__swsetup_r+0x66>
 800090c:	4630      	mov	r0, r6
 800090e:	f000 fa8f 	bl	8000e30 <_free_r>
 8000912:	2300      	movs	r3, #0
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800091c:	81a3      	strh	r3, [r4, #12]
 800091e:	2300      	movs	r3, #0
 8000920:	6063      	str	r3, [r4, #4]
 8000922:	6923      	ldr	r3, [r4, #16]
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	89a3      	ldrh	r3, [r4, #12]
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	81a3      	strh	r3, [r4, #12]
 800092e:	6923      	ldr	r3, [r4, #16]
 8000930:	b94b      	cbnz	r3, 8000946 <__swsetup_r+0x9a>
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800093c:	d003      	beq.n	8000946 <__swsetup_r+0x9a>
 800093e:	4621      	mov	r1, r4
 8000940:	4630      	mov	r0, r6
 8000942:	f000 fa2d 	bl	8000da0 <__smakebuf_r>
 8000946:	89a0      	ldrh	r0, [r4, #12]
 8000948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800094c:	f010 0301 	ands.w	r3, r0, #1
 8000950:	d00a      	beq.n	8000968 <__swsetup_r+0xbc>
 8000952:	2300      	movs	r3, #0
 8000954:	60a3      	str	r3, [r4, #8]
 8000956:	6963      	ldr	r3, [r4, #20]
 8000958:	425b      	negs	r3, r3
 800095a:	61a3      	str	r3, [r4, #24]
 800095c:	6923      	ldr	r3, [r4, #16]
 800095e:	b943      	cbnz	r3, 8000972 <__swsetup_r+0xc6>
 8000960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000964:	d1ba      	bne.n	80008dc <__swsetup_r+0x30>
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	0781      	lsls	r1, r0, #30
 800096a:	bf58      	it	pl
 800096c:	6963      	ldrpl	r3, [r4, #20]
 800096e:	60a3      	str	r3, [r4, #8]
 8000970:	e7f4      	b.n	800095c <__swsetup_r+0xb0>
 8000972:	2000      	movs	r0, #0
 8000974:	e7f7      	b.n	8000966 <__swsetup_r+0xba>
 8000976:	bf00      	nop
 8000978:	20000044 	.word	0x20000044
 800097c:	080019f0 	.word	0x080019f0
 8000980:	08001a10 	.word	0x08001a10
 8000984:	080019d0 	.word	0x080019d0

08000988 <__assert_func>:
 8000988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800098a:	4614      	mov	r4, r2
 800098c:	461a      	mov	r2, r3
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <__assert_func+0x2c>)
 8000990:	4605      	mov	r5, r0
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68d8      	ldr	r0, [r3, #12]
 8000996:	b14c      	cbz	r4, 80009ac <__assert_func+0x24>
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <__assert_func+0x30>)
 800099a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800099e:	9100      	str	r1, [sp, #0]
 80009a0:	462b      	mov	r3, r5
 80009a2:	4906      	ldr	r1, [pc, #24]	; (80009bc <__assert_func+0x34>)
 80009a4:	f000 f9a2 	bl	8000cec <fiprintf>
 80009a8:	f000 feba 	bl	8001720 <abort>
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__assert_func+0x38>)
 80009ae:	461c      	mov	r4, r3
 80009b0:	e7f3      	b.n	800099a <__assert_func+0x12>
 80009b2:	bf00      	nop
 80009b4:	20000044 	.word	0x20000044
 80009b8:	08001992 	.word	0x08001992
 80009bc:	0800199f 	.word	0x0800199f
 80009c0:	080019cd 	.word	0x080019cd

080009c4 <__sflush_r>:
 80009c4:	898a      	ldrh	r2, [r1, #12]
 80009c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c8:	4605      	mov	r5, r0
 80009ca:	0710      	lsls	r0, r2, #28
 80009cc:	460c      	mov	r4, r1
 80009ce:	d457      	bmi.n	8000a80 <__sflush_r+0xbc>
 80009d0:	684b      	ldr	r3, [r1, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	dc04      	bgt.n	80009e0 <__sflush_r+0x1c>
 80009d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dc01      	bgt.n	80009e0 <__sflush_r+0x1c>
 80009dc:	2000      	movs	r0, #0
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d0fa      	beq.n	80009dc <__sflush_r+0x18>
 80009e6:	2300      	movs	r3, #0
 80009e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80009ec:	682f      	ldr	r7, [r5, #0]
 80009ee:	602b      	str	r3, [r5, #0]
 80009f0:	d032      	beq.n	8000a58 <__sflush_r+0x94>
 80009f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80009f4:	89a3      	ldrh	r3, [r4, #12]
 80009f6:	075a      	lsls	r2, r3, #29
 80009f8:	d505      	bpl.n	8000a06 <__sflush_r+0x42>
 80009fa:	6863      	ldr	r3, [r4, #4]
 80009fc:	1ac0      	subs	r0, r0, r3
 80009fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a00:	b10b      	cbz	r3, 8000a06 <__sflush_r+0x42>
 8000a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a04:	1ac0      	subs	r0, r0, r3
 8000a06:	2300      	movs	r3, #0
 8000a08:	4602      	mov	r2, r0
 8000a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a0c:	4628      	mov	r0, r5
 8000a0e:	6a21      	ldr	r1, [r4, #32]
 8000a10:	47b0      	blx	r6
 8000a12:	1c43      	adds	r3, r0, #1
 8000a14:	89a3      	ldrh	r3, [r4, #12]
 8000a16:	d106      	bne.n	8000a26 <__sflush_r+0x62>
 8000a18:	6829      	ldr	r1, [r5, #0]
 8000a1a:	291d      	cmp	r1, #29
 8000a1c:	d82c      	bhi.n	8000a78 <__sflush_r+0xb4>
 8000a1e:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <__sflush_r+0x100>)
 8000a20:	40ca      	lsrs	r2, r1
 8000a22:	07d6      	lsls	r6, r2, #31
 8000a24:	d528      	bpl.n	8000a78 <__sflush_r+0xb4>
 8000a26:	2200      	movs	r2, #0
 8000a28:	6062      	str	r2, [r4, #4]
 8000a2a:	6922      	ldr	r2, [r4, #16]
 8000a2c:	04d9      	lsls	r1, r3, #19
 8000a2e:	6022      	str	r2, [r4, #0]
 8000a30:	d504      	bpl.n	8000a3c <__sflush_r+0x78>
 8000a32:	1c42      	adds	r2, r0, #1
 8000a34:	d101      	bne.n	8000a3a <__sflush_r+0x76>
 8000a36:	682b      	ldr	r3, [r5, #0]
 8000a38:	b903      	cbnz	r3, 8000a3c <__sflush_r+0x78>
 8000a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8000a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a3e:	602f      	str	r7, [r5, #0]
 8000a40:	2900      	cmp	r1, #0
 8000a42:	d0cb      	beq.n	80009dc <__sflush_r+0x18>
 8000a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d002      	beq.n	8000a52 <__sflush_r+0x8e>
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	f000 f9ef 	bl	8000e30 <_free_r>
 8000a52:	2000      	movs	r0, #0
 8000a54:	6360      	str	r0, [r4, #52]	; 0x34
 8000a56:	e7c2      	b.n	80009de <__sflush_r+0x1a>
 8000a58:	6a21      	ldr	r1, [r4, #32]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	47b0      	blx	r6
 8000a60:	1c41      	adds	r1, r0, #1
 8000a62:	d1c7      	bne.n	80009f4 <__sflush_r+0x30>
 8000a64:	682b      	ldr	r3, [r5, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0c4      	beq.n	80009f4 <__sflush_r+0x30>
 8000a6a:	2b1d      	cmp	r3, #29
 8000a6c:	d001      	beq.n	8000a72 <__sflush_r+0xae>
 8000a6e:	2b16      	cmp	r3, #22
 8000a70:	d101      	bne.n	8000a76 <__sflush_r+0xb2>
 8000a72:	602f      	str	r7, [r5, #0]
 8000a74:	e7b2      	b.n	80009dc <__sflush_r+0x18>
 8000a76:	89a3      	ldrh	r3, [r4, #12]
 8000a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7c:	81a3      	strh	r3, [r4, #12]
 8000a7e:	e7ae      	b.n	80009de <__sflush_r+0x1a>
 8000a80:	690f      	ldr	r7, [r1, #16]
 8000a82:	2f00      	cmp	r7, #0
 8000a84:	d0aa      	beq.n	80009dc <__sflush_r+0x18>
 8000a86:	0793      	lsls	r3, r2, #30
 8000a88:	bf18      	it	ne
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	680e      	ldr	r6, [r1, #0]
 8000a8e:	bf08      	it	eq
 8000a90:	694b      	ldreq	r3, [r1, #20]
 8000a92:	1bf6      	subs	r6, r6, r7
 8000a94:	600f      	str	r7, [r1, #0]
 8000a96:	608b      	str	r3, [r1, #8]
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	dd9f      	ble.n	80009dc <__sflush_r+0x18>
 8000a9c:	4633      	mov	r3, r6
 8000a9e:	463a      	mov	r2, r7
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	6a21      	ldr	r1, [r4, #32]
 8000aa4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000aa8:	47e0      	blx	ip
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	dc06      	bgt.n	8000abc <__sflush_r+0xf8>
 8000aae:	89a3      	ldrh	r3, [r4, #12]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab8:	81a3      	strh	r3, [r4, #12]
 8000aba:	e790      	b.n	80009de <__sflush_r+0x1a>
 8000abc:	4407      	add	r7, r0
 8000abe:	1a36      	subs	r6, r6, r0
 8000ac0:	e7ea      	b.n	8000a98 <__sflush_r+0xd4>
 8000ac2:	bf00      	nop
 8000ac4:	20400001 	.word	0x20400001

08000ac8 <_fflush_r>:
 8000ac8:	b538      	push	{r3, r4, r5, lr}
 8000aca:	690b      	ldr	r3, [r1, #16]
 8000acc:	4605      	mov	r5, r0
 8000ace:	460c      	mov	r4, r1
 8000ad0:	b913      	cbnz	r3, 8000ad8 <_fflush_r+0x10>
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	bd38      	pop	{r3, r4, r5, pc}
 8000ad8:	b118      	cbz	r0, 8000ae2 <_fflush_r+0x1a>
 8000ada:	6983      	ldr	r3, [r0, #24]
 8000adc:	b90b      	cbnz	r3, 8000ae2 <_fflush_r+0x1a>
 8000ade:	f000 f887 	bl	8000bf0 <__sinit>
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <_fflush_r+0x6c>)
 8000ae4:	429c      	cmp	r4, r3
 8000ae6:	d11b      	bne.n	8000b20 <_fflush_r+0x58>
 8000ae8:	686c      	ldr	r4, [r5, #4]
 8000aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0ef      	beq.n	8000ad2 <_fflush_r+0xa>
 8000af2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000af4:	07d0      	lsls	r0, r2, #31
 8000af6:	d404      	bmi.n	8000b02 <_fflush_r+0x3a>
 8000af8:	0599      	lsls	r1, r3, #22
 8000afa:	d402      	bmi.n	8000b02 <_fflush_r+0x3a>
 8000afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000afe:	f000 f927 	bl	8000d50 <__retarget_lock_acquire_recursive>
 8000b02:	4628      	mov	r0, r5
 8000b04:	4621      	mov	r1, r4
 8000b06:	f7ff ff5d 	bl	80009c4 <__sflush_r>
 8000b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	07da      	lsls	r2, r3, #31
 8000b10:	d4e0      	bmi.n	8000ad4 <_fflush_r+0xc>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	059b      	lsls	r3, r3, #22
 8000b16:	d4dd      	bmi.n	8000ad4 <_fflush_r+0xc>
 8000b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1a:	f000 f91a 	bl	8000d52 <__retarget_lock_release_recursive>
 8000b1e:	e7d9      	b.n	8000ad4 <_fflush_r+0xc>
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <_fflush_r+0x70>)
 8000b22:	429c      	cmp	r4, r3
 8000b24:	d101      	bne.n	8000b2a <_fflush_r+0x62>
 8000b26:	68ac      	ldr	r4, [r5, #8]
 8000b28:	e7df      	b.n	8000aea <_fflush_r+0x22>
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <_fflush_r+0x74>)
 8000b2c:	429c      	cmp	r4, r3
 8000b2e:	bf08      	it	eq
 8000b30:	68ec      	ldreq	r4, [r5, #12]
 8000b32:	e7da      	b.n	8000aea <_fflush_r+0x22>
 8000b34:	080019f0 	.word	0x080019f0
 8000b38:	08001a10 	.word	0x08001a10
 8000b3c:	080019d0 	.word	0x080019d0

08000b40 <std>:
 8000b40:	2300      	movs	r3, #0
 8000b42:	b510      	push	{r4, lr}
 8000b44:	4604      	mov	r4, r0
 8000b46:	e9c0 3300 	strd	r3, r3, [r0]
 8000b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b4e:	6083      	str	r3, [r0, #8]
 8000b50:	8181      	strh	r1, [r0, #12]
 8000b52:	6643      	str	r3, [r0, #100]	; 0x64
 8000b54:	81c2      	strh	r2, [r0, #14]
 8000b56:	6183      	str	r3, [r0, #24]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2208      	movs	r2, #8
 8000b5c:	305c      	adds	r0, #92	; 0x5c
 8000b5e:	f7ff fd6b 	bl	8000638 <memset>
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <std+0x38>)
 8000b64:	6224      	str	r4, [r4, #32]
 8000b66:	6263      	str	r3, [r4, #36]	; 0x24
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <std+0x3c>)
 8000b6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <std+0x40>)
 8000b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <std+0x44>)
 8000b72:	6323      	str	r3, [r4, #48]	; 0x30
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	bf00      	nop
 8000b78:	08001675 	.word	0x08001675
 8000b7c:	08001697 	.word	0x08001697
 8000b80:	080016cf 	.word	0x080016cf
 8000b84:	080016f3 	.word	0x080016f3

08000b88 <_cleanup_r>:
 8000b88:	4901      	ldr	r1, [pc, #4]	; (8000b90 <_cleanup_r+0x8>)
 8000b8a:	f000 b8c1 	b.w	8000d10 <_fwalk_reent>
 8000b8e:	bf00      	nop
 8000b90:	08000ac9 	.word	0x08000ac9

08000b94 <__sfmoreglue>:
 8000b94:	2268      	movs	r2, #104	; 0x68
 8000b96:	b570      	push	{r4, r5, r6, lr}
 8000b98:	1e4d      	subs	r5, r1, #1
 8000b9a:	4355      	muls	r5, r2
 8000b9c:	460e      	mov	r6, r1
 8000b9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ba2:	f000 f9ad 	bl	8000f00 <_malloc_r>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b140      	cbz	r0, 8000bbc <__sfmoreglue+0x28>
 8000baa:	2100      	movs	r1, #0
 8000bac:	e9c0 1600 	strd	r1, r6, [r0]
 8000bb0:	300c      	adds	r0, #12
 8000bb2:	60a0      	str	r0, [r4, #8]
 8000bb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bb8:	f7ff fd3e 	bl	8000638 <memset>
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}

08000bc0 <__sfp_lock_acquire>:
 8000bc0:	4801      	ldr	r0, [pc, #4]	; (8000bc8 <__sfp_lock_acquire+0x8>)
 8000bc2:	f000 b8c5 	b.w	8000d50 <__retarget_lock_acquire_recursive>
 8000bc6:	bf00      	nop
 8000bc8:	200000cd 	.word	0x200000cd

08000bcc <__sfp_lock_release>:
 8000bcc:	4801      	ldr	r0, [pc, #4]	; (8000bd4 <__sfp_lock_release+0x8>)
 8000bce:	f000 b8c0 	b.w	8000d52 <__retarget_lock_release_recursive>
 8000bd2:	bf00      	nop
 8000bd4:	200000cd 	.word	0x200000cd

08000bd8 <__sinit_lock_acquire>:
 8000bd8:	4801      	ldr	r0, [pc, #4]	; (8000be0 <__sinit_lock_acquire+0x8>)
 8000bda:	f000 b8b9 	b.w	8000d50 <__retarget_lock_acquire_recursive>
 8000bde:	bf00      	nop
 8000be0:	200000ce 	.word	0x200000ce

08000be4 <__sinit_lock_release>:
 8000be4:	4801      	ldr	r0, [pc, #4]	; (8000bec <__sinit_lock_release+0x8>)
 8000be6:	f000 b8b4 	b.w	8000d52 <__retarget_lock_release_recursive>
 8000bea:	bf00      	nop
 8000bec:	200000ce 	.word	0x200000ce

08000bf0 <__sinit>:
 8000bf0:	b510      	push	{r4, lr}
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	f7ff fff0 	bl	8000bd8 <__sinit_lock_acquire>
 8000bf8:	69a3      	ldr	r3, [r4, #24]
 8000bfa:	b11b      	cbz	r3, 8000c04 <__sinit+0x14>
 8000bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c00:	f7ff bff0 	b.w	8000be4 <__sinit_lock_release>
 8000c04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c08:	6523      	str	r3, [r4, #80]	; 0x50
 8000c0a:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <__sinit+0x68>)
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <__sinit+0x6c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	bf08      	it	eq
 8000c16:	2301      	moveq	r3, #1
 8000c18:	4620      	mov	r0, r4
 8000c1a:	bf08      	it	eq
 8000c1c:	61a3      	streq	r3, [r4, #24]
 8000c1e:	f000 f81f 	bl	8000c60 <__sfp>
 8000c22:	6060      	str	r0, [r4, #4]
 8000c24:	4620      	mov	r0, r4
 8000c26:	f000 f81b 	bl	8000c60 <__sfp>
 8000c2a:	60a0      	str	r0, [r4, #8]
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f000 f817 	bl	8000c60 <__sfp>
 8000c32:	2200      	movs	r2, #0
 8000c34:	2104      	movs	r1, #4
 8000c36:	60e0      	str	r0, [r4, #12]
 8000c38:	6860      	ldr	r0, [r4, #4]
 8000c3a:	f7ff ff81 	bl	8000b40 <std>
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2109      	movs	r1, #9
 8000c42:	68a0      	ldr	r0, [r4, #8]
 8000c44:	f7ff ff7c 	bl	8000b40 <std>
 8000c48:	2202      	movs	r2, #2
 8000c4a:	2112      	movs	r1, #18
 8000c4c:	68e0      	ldr	r0, [r4, #12]
 8000c4e:	f7ff ff77 	bl	8000b40 <std>
 8000c52:	2301      	movs	r3, #1
 8000c54:	61a3      	str	r3, [r4, #24]
 8000c56:	e7d1      	b.n	8000bfc <__sinit+0xc>
 8000c58:	0800191c 	.word	0x0800191c
 8000c5c:	08000b89 	.word	0x08000b89

08000c60 <__sfp>:
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	4607      	mov	r7, r0
 8000c64:	f7ff ffac 	bl	8000bc0 <__sfp_lock_acquire>
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <__sfp+0x84>)
 8000c6a:	681e      	ldr	r6, [r3, #0]
 8000c6c:	69b3      	ldr	r3, [r6, #24]
 8000c6e:	b913      	cbnz	r3, 8000c76 <__sfp+0x16>
 8000c70:	4630      	mov	r0, r6
 8000c72:	f7ff ffbd 	bl	8000bf0 <__sinit>
 8000c76:	3648      	adds	r6, #72	; 0x48
 8000c78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	d503      	bpl.n	8000c88 <__sfp+0x28>
 8000c80:	6833      	ldr	r3, [r6, #0]
 8000c82:	b30b      	cbz	r3, 8000cc8 <__sfp+0x68>
 8000c84:	6836      	ldr	r6, [r6, #0]
 8000c86:	e7f7      	b.n	8000c78 <__sfp+0x18>
 8000c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c8c:	b9d5      	cbnz	r5, 8000cc4 <__sfp+0x64>
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <__sfp+0x88>)
 8000c90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c94:	60e3      	str	r3, [r4, #12]
 8000c96:	6665      	str	r5, [r4, #100]	; 0x64
 8000c98:	f000 f859 	bl	8000d4e <__retarget_lock_init_recursive>
 8000c9c:	f7ff ff96 	bl	8000bcc <__sfp_lock_release>
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cac:	6025      	str	r5, [r4, #0]
 8000cae:	61a5      	str	r5, [r4, #24]
 8000cb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cb4:	f7ff fcc0 	bl	8000638 <memset>
 8000cb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cc4:	3468      	adds	r4, #104	; 0x68
 8000cc6:	e7d9      	b.n	8000c7c <__sfp+0x1c>
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4638      	mov	r0, r7
 8000ccc:	f7ff ff62 	bl	8000b94 <__sfmoreglue>
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	6030      	str	r0, [r6, #0]
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d1d5      	bne.n	8000c84 <__sfp+0x24>
 8000cd8:	f7ff ff78 	bl	8000bcc <__sfp_lock_release>
 8000cdc:	230c      	movs	r3, #12
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	e7ee      	b.n	8000cc0 <__sfp+0x60>
 8000ce2:	bf00      	nop
 8000ce4:	0800191c 	.word	0x0800191c
 8000ce8:	ffff0001 	.word	0xffff0001

08000cec <fiprintf>:
 8000cec:	b40e      	push	{r1, r2, r3}
 8000cee:	b503      	push	{r0, r1, lr}
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	ab03      	add	r3, sp, #12
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <fiprintf+0x20>)
 8000cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cfa:	6800      	ldr	r0, [r0, #0]
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	f000 f99b 	bl	8001038 <_vfiprintf_r>
 8000d02:	b002      	add	sp, #8
 8000d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d08:	b003      	add	sp, #12
 8000d0a:	4770      	bx	lr
 8000d0c:	20000044 	.word	0x20000044

08000d10 <_fwalk_reent>:
 8000d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d14:	4606      	mov	r6, r0
 8000d16:	4688      	mov	r8, r1
 8000d18:	2700      	movs	r7, #0
 8000d1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d22:	f1b9 0901 	subs.w	r9, r9, #1
 8000d26:	d505      	bpl.n	8000d34 <_fwalk_reent+0x24>
 8000d28:	6824      	ldr	r4, [r4, #0]
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d1f7      	bne.n	8000d1e <_fwalk_reent+0xe>
 8000d2e:	4638      	mov	r0, r7
 8000d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d34:	89ab      	ldrh	r3, [r5, #12]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d907      	bls.n	8000d4a <_fwalk_reent+0x3a>
 8000d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	d003      	beq.n	8000d4a <_fwalk_reent+0x3a>
 8000d42:	4629      	mov	r1, r5
 8000d44:	4630      	mov	r0, r6
 8000d46:	47c0      	blx	r8
 8000d48:	4307      	orrs	r7, r0
 8000d4a:	3568      	adds	r5, #104	; 0x68
 8000d4c:	e7e9      	b.n	8000d22 <_fwalk_reent+0x12>

08000d4e <__retarget_lock_init_recursive>:
 8000d4e:	4770      	bx	lr

08000d50 <__retarget_lock_acquire_recursive>:
 8000d50:	4770      	bx	lr

08000d52 <__retarget_lock_release_recursive>:
 8000d52:	4770      	bx	lr

08000d54 <__swhatbuf_r>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	460e      	mov	r6, r1
 8000d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5c:	4614      	mov	r4, r2
 8000d5e:	2900      	cmp	r1, #0
 8000d60:	461d      	mov	r5, r3
 8000d62:	b096      	sub	sp, #88	; 0x58
 8000d64:	da08      	bge.n	8000d78 <__swhatbuf_r+0x24>
 8000d66:	2200      	movs	r2, #0
 8000d68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000d6c:	602a      	str	r2, [r5, #0]
 8000d6e:	061a      	lsls	r2, r3, #24
 8000d70:	d410      	bmi.n	8000d94 <__swhatbuf_r+0x40>
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	e00e      	b.n	8000d96 <__swhatbuf_r+0x42>
 8000d78:	466a      	mov	r2, sp
 8000d7a:	f000 fce9 	bl	8001750 <_fstat_r>
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	dbf1      	blt.n	8000d66 <__swhatbuf_r+0x12>
 8000d82:	9a01      	ldr	r2, [sp, #4]
 8000d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d8c:	425a      	negs	r2, r3
 8000d8e:	415a      	adcs	r2, r3
 8000d90:	602a      	str	r2, [r5, #0]
 8000d92:	e7ee      	b.n	8000d72 <__swhatbuf_r+0x1e>
 8000d94:	2340      	movs	r3, #64	; 0x40
 8000d96:	2000      	movs	r0, #0
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	b016      	add	sp, #88	; 0x58
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000da0 <__smakebuf_r>:
 8000da0:	898b      	ldrh	r3, [r1, #12]
 8000da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000da4:	079d      	lsls	r5, r3, #30
 8000da6:	4606      	mov	r6, r0
 8000da8:	460c      	mov	r4, r1
 8000daa:	d507      	bpl.n	8000dbc <__smakebuf_r+0x1c>
 8000dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	6123      	str	r3, [r4, #16]
 8000db4:	2301      	movs	r3, #1
 8000db6:	6163      	str	r3, [r4, #20]
 8000db8:	b002      	add	sp, #8
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	466a      	mov	r2, sp
 8000dbe:	ab01      	add	r3, sp, #4
 8000dc0:	f7ff ffc8 	bl	8000d54 <__swhatbuf_r>
 8000dc4:	9900      	ldr	r1, [sp, #0]
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f000 f899 	bl	8000f00 <_malloc_r>
 8000dce:	b948      	cbnz	r0, 8000de4 <__smakebuf_r+0x44>
 8000dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dd4:	059a      	lsls	r2, r3, #22
 8000dd6:	d4ef      	bmi.n	8000db8 <__smakebuf_r+0x18>
 8000dd8:	f023 0303 	bic.w	r3, r3, #3
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	81a3      	strh	r3, [r4, #12]
 8000de2:	e7e3      	b.n	8000dac <__smakebuf_r+0xc>
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <__smakebuf_r+0x7c>)
 8000de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000de8:	89a3      	ldrh	r3, [r4, #12]
 8000dea:	6020      	str	r0, [r4, #0]
 8000dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df0:	81a3      	strh	r3, [r4, #12]
 8000df2:	9b00      	ldr	r3, [sp, #0]
 8000df4:	6120      	str	r0, [r4, #16]
 8000df6:	6163      	str	r3, [r4, #20]
 8000df8:	9b01      	ldr	r3, [sp, #4]
 8000dfa:	b15b      	cbz	r3, 8000e14 <__smakebuf_r+0x74>
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e02:	f000 fcb7 	bl	8001774 <_isatty_r>
 8000e06:	b128      	cbz	r0, 8000e14 <__smakebuf_r+0x74>
 8000e08:	89a3      	ldrh	r3, [r4, #12]
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	81a3      	strh	r3, [r4, #12]
 8000e14:	89a0      	ldrh	r0, [r4, #12]
 8000e16:	4305      	orrs	r5, r0
 8000e18:	81a5      	strh	r5, [r4, #12]
 8000e1a:	e7cd      	b.n	8000db8 <__smakebuf_r+0x18>
 8000e1c:	08000b89 	.word	0x08000b89

08000e20 <malloc>:
 8000e20:	4b02      	ldr	r3, [pc, #8]	; (8000e2c <malloc+0xc>)
 8000e22:	4601      	mov	r1, r0
 8000e24:	6818      	ldr	r0, [r3, #0]
 8000e26:	f000 b86b 	b.w	8000f00 <_malloc_r>
 8000e2a:	bf00      	nop
 8000e2c:	20000044 	.word	0x20000044

08000e30 <_free_r>:
 8000e30:	b538      	push	{r3, r4, r5, lr}
 8000e32:	4605      	mov	r5, r0
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d040      	beq.n	8000eba <_free_r+0x8a>
 8000e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e3c:	1f0c      	subs	r4, r1, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bfb8      	it	lt
 8000e42:	18e4      	addlt	r4, r4, r3
 8000e44:	f000 fcc6 	bl	80017d4 <__malloc_lock>
 8000e48:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <_free_r+0x8c>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	b933      	cbnz	r3, 8000e5c <_free_r+0x2c>
 8000e4e:	6063      	str	r3, [r4, #4]
 8000e50:	6014      	str	r4, [r2, #0]
 8000e52:	4628      	mov	r0, r5
 8000e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e58:	f000 bcc2 	b.w	80017e0 <__malloc_unlock>
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <_free_r+0x42>
 8000e60:	6820      	ldr	r0, [r4, #0]
 8000e62:	1821      	adds	r1, r4, r0
 8000e64:	428b      	cmp	r3, r1
 8000e66:	bf01      	itttt	eq
 8000e68:	6819      	ldreq	r1, [r3, #0]
 8000e6a:	685b      	ldreq	r3, [r3, #4]
 8000e6c:	1809      	addeq	r1, r1, r0
 8000e6e:	6021      	streq	r1, [r4, #0]
 8000e70:	e7ed      	b.n	8000e4e <_free_r+0x1e>
 8000e72:	461a      	mov	r2, r3
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	b10b      	cbz	r3, 8000e7c <_free_r+0x4c>
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d9fa      	bls.n	8000e72 <_free_r+0x42>
 8000e7c:	6811      	ldr	r1, [r2, #0]
 8000e7e:	1850      	adds	r0, r2, r1
 8000e80:	42a0      	cmp	r0, r4
 8000e82:	d10b      	bne.n	8000e9c <_free_r+0x6c>
 8000e84:	6820      	ldr	r0, [r4, #0]
 8000e86:	4401      	add	r1, r0
 8000e88:	1850      	adds	r0, r2, r1
 8000e8a:	4283      	cmp	r3, r0
 8000e8c:	6011      	str	r1, [r2, #0]
 8000e8e:	d1e0      	bne.n	8000e52 <_free_r+0x22>
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4401      	add	r1, r0
 8000e96:	6011      	str	r1, [r2, #0]
 8000e98:	6053      	str	r3, [r2, #4]
 8000e9a:	e7da      	b.n	8000e52 <_free_r+0x22>
 8000e9c:	d902      	bls.n	8000ea4 <_free_r+0x74>
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	602b      	str	r3, [r5, #0]
 8000ea2:	e7d6      	b.n	8000e52 <_free_r+0x22>
 8000ea4:	6820      	ldr	r0, [r4, #0]
 8000ea6:	1821      	adds	r1, r4, r0
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf01      	itttt	eq
 8000eac:	6819      	ldreq	r1, [r3, #0]
 8000eae:	685b      	ldreq	r3, [r3, #4]
 8000eb0:	1809      	addeq	r1, r1, r0
 8000eb2:	6021      	streq	r1, [r4, #0]
 8000eb4:	6063      	str	r3, [r4, #4]
 8000eb6:	6054      	str	r4, [r2, #4]
 8000eb8:	e7cb      	b.n	8000e52 <_free_r+0x22>
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	200000d0 	.word	0x200000d0

08000ec0 <sbrk_aligned>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4e0e      	ldr	r6, [pc, #56]	; (8000efc <sbrk_aligned+0x3c>)
 8000ec4:	460c      	mov	r4, r1
 8000ec6:	6831      	ldr	r1, [r6, #0]
 8000ec8:	4605      	mov	r5, r0
 8000eca:	b911      	cbnz	r1, 8000ed2 <sbrk_aligned+0x12>
 8000ecc:	f000 fbc2 	bl	8001654 <_sbrk_r>
 8000ed0:	6030      	str	r0, [r6, #0]
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	4628      	mov	r0, r5
 8000ed6:	f000 fbbd 	bl	8001654 <_sbrk_r>
 8000eda:	1c43      	adds	r3, r0, #1
 8000edc:	d00a      	beq.n	8000ef4 <sbrk_aligned+0x34>
 8000ede:	1cc4      	adds	r4, r0, #3
 8000ee0:	f024 0403 	bic.w	r4, r4, #3
 8000ee4:	42a0      	cmp	r0, r4
 8000ee6:	d007      	beq.n	8000ef8 <sbrk_aligned+0x38>
 8000ee8:	1a21      	subs	r1, r4, r0
 8000eea:	4628      	mov	r0, r5
 8000eec:	f000 fbb2 	bl	8001654 <_sbrk_r>
 8000ef0:	3001      	adds	r0, #1
 8000ef2:	d101      	bne.n	8000ef8 <sbrk_aligned+0x38>
 8000ef4:	f04f 34ff 	mov.w	r4, #4294967295
 8000ef8:	4620      	mov	r0, r4
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	200000d4 	.word	0x200000d4

08000f00 <_malloc_r>:
 8000f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f04:	1ccd      	adds	r5, r1, #3
 8000f06:	f025 0503 	bic.w	r5, r5, #3
 8000f0a:	3508      	adds	r5, #8
 8000f0c:	2d0c      	cmp	r5, #12
 8000f0e:	bf38      	it	cc
 8000f10:	250c      	movcc	r5, #12
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	4607      	mov	r7, r0
 8000f16:	db01      	blt.n	8000f1c <_malloc_r+0x1c>
 8000f18:	42a9      	cmp	r1, r5
 8000f1a:	d905      	bls.n	8000f28 <_malloc_r+0x28>
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	2600      	movs	r6, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4630      	mov	r0, r6
 8000f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f28:	4e2e      	ldr	r6, [pc, #184]	; (8000fe4 <_malloc_r+0xe4>)
 8000f2a:	f000 fc53 	bl	80017d4 <__malloc_lock>
 8000f2e:	6833      	ldr	r3, [r6, #0]
 8000f30:	461c      	mov	r4, r3
 8000f32:	bb34      	cbnz	r4, 8000f82 <_malloc_r+0x82>
 8000f34:	4629      	mov	r1, r5
 8000f36:	4638      	mov	r0, r7
 8000f38:	f7ff ffc2 	bl	8000ec0 <sbrk_aligned>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	4604      	mov	r4, r0
 8000f40:	d14d      	bne.n	8000fde <_malloc_r+0xde>
 8000f42:	6834      	ldr	r4, [r6, #0]
 8000f44:	4626      	mov	r6, r4
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d140      	bne.n	8000fcc <_malloc_r+0xcc>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	4638      	mov	r0, r7
 8000f50:	eb04 0803 	add.w	r8, r4, r3
 8000f54:	f000 fb7e 	bl	8001654 <_sbrk_r>
 8000f58:	4580      	cmp	r8, r0
 8000f5a:	d13a      	bne.n	8000fd2 <_malloc_r+0xd2>
 8000f5c:	6821      	ldr	r1, [r4, #0]
 8000f5e:	3503      	adds	r5, #3
 8000f60:	1a6d      	subs	r5, r5, r1
 8000f62:	f025 0503 	bic.w	r5, r5, #3
 8000f66:	3508      	adds	r5, #8
 8000f68:	2d0c      	cmp	r5, #12
 8000f6a:	bf38      	it	cc
 8000f6c:	250c      	movcc	r5, #12
 8000f6e:	4638      	mov	r0, r7
 8000f70:	4629      	mov	r1, r5
 8000f72:	f7ff ffa5 	bl	8000ec0 <sbrk_aligned>
 8000f76:	3001      	adds	r0, #1
 8000f78:	d02b      	beq.n	8000fd2 <_malloc_r+0xd2>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	442b      	add	r3, r5
 8000f7e:	6023      	str	r3, [r4, #0]
 8000f80:	e00e      	b.n	8000fa0 <_malloc_r+0xa0>
 8000f82:	6822      	ldr	r2, [r4, #0]
 8000f84:	1b52      	subs	r2, r2, r5
 8000f86:	d41e      	bmi.n	8000fc6 <_malloc_r+0xc6>
 8000f88:	2a0b      	cmp	r2, #11
 8000f8a:	d916      	bls.n	8000fba <_malloc_r+0xba>
 8000f8c:	1961      	adds	r1, r4, r5
 8000f8e:	42a3      	cmp	r3, r4
 8000f90:	6025      	str	r5, [r4, #0]
 8000f92:	bf18      	it	ne
 8000f94:	6059      	strne	r1, [r3, #4]
 8000f96:	6863      	ldr	r3, [r4, #4]
 8000f98:	bf08      	it	eq
 8000f9a:	6031      	streq	r1, [r6, #0]
 8000f9c:	5162      	str	r2, [r4, r5]
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	f104 060b 	add.w	r6, r4, #11
 8000fa6:	f000 fc1b 	bl	80017e0 <__malloc_unlock>
 8000faa:	f026 0607 	bic.w	r6, r6, #7
 8000fae:	1d23      	adds	r3, r4, #4
 8000fb0:	1af2      	subs	r2, r6, r3
 8000fb2:	d0b6      	beq.n	8000f22 <_malloc_r+0x22>
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	50a3      	str	r3, [r4, r2]
 8000fb8:	e7b3      	b.n	8000f22 <_malloc_r+0x22>
 8000fba:	6862      	ldr	r2, [r4, #4]
 8000fbc:	42a3      	cmp	r3, r4
 8000fbe:	bf0c      	ite	eq
 8000fc0:	6032      	streq	r2, [r6, #0]
 8000fc2:	605a      	strne	r2, [r3, #4]
 8000fc4:	e7ec      	b.n	8000fa0 <_malloc_r+0xa0>
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	6864      	ldr	r4, [r4, #4]
 8000fca:	e7b2      	b.n	8000f32 <_malloc_r+0x32>
 8000fcc:	4634      	mov	r4, r6
 8000fce:	6876      	ldr	r6, [r6, #4]
 8000fd0:	e7b9      	b.n	8000f46 <_malloc_r+0x46>
 8000fd2:	230c      	movs	r3, #12
 8000fd4:	4638      	mov	r0, r7
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	f000 fc02 	bl	80017e0 <__malloc_unlock>
 8000fdc:	e7a1      	b.n	8000f22 <_malloc_r+0x22>
 8000fde:	6025      	str	r5, [r4, #0]
 8000fe0:	e7de      	b.n	8000fa0 <_malloc_r+0xa0>
 8000fe2:	bf00      	nop
 8000fe4:	200000d0 	.word	0x200000d0

08000fe8 <__sfputc_r>:
 8000fe8:	6893      	ldr	r3, [r2, #8]
 8000fea:	b410      	push	{r4}
 8000fec:	3b01      	subs	r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	6093      	str	r3, [r2, #8]
 8000ff2:	da07      	bge.n	8001004 <__sfputc_r+0x1c>
 8000ff4:	6994      	ldr	r4, [r2, #24]
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	db01      	blt.n	8000ffe <__sfputc_r+0x16>
 8000ffa:	290a      	cmp	r1, #10
 8000ffc:	d102      	bne.n	8001004 <__sfputc_r+0x1c>
 8000ffe:	bc10      	pop	{r4}
 8001000:	f7ff bc02 	b.w	8000808 <__swbuf_r>
 8001004:	6813      	ldr	r3, [r2, #0]
 8001006:	1c58      	adds	r0, r3, #1
 8001008:	6010      	str	r0, [r2, #0]
 800100a:	7019      	strb	r1, [r3, #0]
 800100c:	4608      	mov	r0, r1
 800100e:	bc10      	pop	{r4}
 8001010:	4770      	bx	lr

08001012 <__sfputs_r>:
 8001012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001014:	4606      	mov	r6, r0
 8001016:	460f      	mov	r7, r1
 8001018:	4614      	mov	r4, r2
 800101a:	18d5      	adds	r5, r2, r3
 800101c:	42ac      	cmp	r4, r5
 800101e:	d101      	bne.n	8001024 <__sfputs_r+0x12>
 8001020:	2000      	movs	r0, #0
 8001022:	e007      	b.n	8001034 <__sfputs_r+0x22>
 8001024:	463a      	mov	r2, r7
 8001026:	4630      	mov	r0, r6
 8001028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800102c:	f7ff ffdc 	bl	8000fe8 <__sfputc_r>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d1f3      	bne.n	800101c <__sfputs_r+0xa>
 8001034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001038 <_vfiprintf_r>:
 8001038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103c:	460d      	mov	r5, r1
 800103e:	4614      	mov	r4, r2
 8001040:	4698      	mov	r8, r3
 8001042:	4606      	mov	r6, r0
 8001044:	b09d      	sub	sp, #116	; 0x74
 8001046:	b118      	cbz	r0, 8001050 <_vfiprintf_r+0x18>
 8001048:	6983      	ldr	r3, [r0, #24]
 800104a:	b90b      	cbnz	r3, 8001050 <_vfiprintf_r+0x18>
 800104c:	f7ff fdd0 	bl	8000bf0 <__sinit>
 8001050:	4b89      	ldr	r3, [pc, #548]	; (8001278 <_vfiprintf_r+0x240>)
 8001052:	429d      	cmp	r5, r3
 8001054:	d11b      	bne.n	800108e <_vfiprintf_r+0x56>
 8001056:	6875      	ldr	r5, [r6, #4]
 8001058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800105a:	07d9      	lsls	r1, r3, #31
 800105c:	d405      	bmi.n	800106a <_vfiprintf_r+0x32>
 800105e:	89ab      	ldrh	r3, [r5, #12]
 8001060:	059a      	lsls	r2, r3, #22
 8001062:	d402      	bmi.n	800106a <_vfiprintf_r+0x32>
 8001064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001066:	f7ff fe73 	bl	8000d50 <__retarget_lock_acquire_recursive>
 800106a:	89ab      	ldrh	r3, [r5, #12]
 800106c:	071b      	lsls	r3, r3, #28
 800106e:	d501      	bpl.n	8001074 <_vfiprintf_r+0x3c>
 8001070:	692b      	ldr	r3, [r5, #16]
 8001072:	b9eb      	cbnz	r3, 80010b0 <_vfiprintf_r+0x78>
 8001074:	4629      	mov	r1, r5
 8001076:	4630      	mov	r0, r6
 8001078:	f7ff fc18 	bl	80008ac <__swsetup_r>
 800107c:	b1c0      	cbz	r0, 80010b0 <_vfiprintf_r+0x78>
 800107e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001080:	07dc      	lsls	r4, r3, #31
 8001082:	d50e      	bpl.n	80010a2 <_vfiprintf_r+0x6a>
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	b01d      	add	sp, #116	; 0x74
 800108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800108e:	4b7b      	ldr	r3, [pc, #492]	; (800127c <_vfiprintf_r+0x244>)
 8001090:	429d      	cmp	r5, r3
 8001092:	d101      	bne.n	8001098 <_vfiprintf_r+0x60>
 8001094:	68b5      	ldr	r5, [r6, #8]
 8001096:	e7df      	b.n	8001058 <_vfiprintf_r+0x20>
 8001098:	4b79      	ldr	r3, [pc, #484]	; (8001280 <_vfiprintf_r+0x248>)
 800109a:	429d      	cmp	r5, r3
 800109c:	bf08      	it	eq
 800109e:	68f5      	ldreq	r5, [r6, #12]
 80010a0:	e7da      	b.n	8001058 <_vfiprintf_r+0x20>
 80010a2:	89ab      	ldrh	r3, [r5, #12]
 80010a4:	0598      	lsls	r0, r3, #22
 80010a6:	d4ed      	bmi.n	8001084 <_vfiprintf_r+0x4c>
 80010a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010aa:	f7ff fe52 	bl	8000d52 <__retarget_lock_release_recursive>
 80010ae:	e7e9      	b.n	8001084 <_vfiprintf_r+0x4c>
 80010b0:	2300      	movs	r3, #0
 80010b2:	9309      	str	r3, [sp, #36]	; 0x24
 80010b4:	2320      	movs	r3, #32
 80010b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010ba:	2330      	movs	r3, #48	; 0x30
 80010bc:	f04f 0901 	mov.w	r9, #1
 80010c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80010c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001284 <_vfiprintf_r+0x24c>
 80010c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010cc:	4623      	mov	r3, r4
 80010ce:	469a      	mov	sl, r3
 80010d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010d4:	b10a      	cbz	r2, 80010da <_vfiprintf_r+0xa2>
 80010d6:	2a25      	cmp	r2, #37	; 0x25
 80010d8:	d1f9      	bne.n	80010ce <_vfiprintf_r+0x96>
 80010da:	ebba 0b04 	subs.w	fp, sl, r4
 80010de:	d00b      	beq.n	80010f8 <_vfiprintf_r+0xc0>
 80010e0:	465b      	mov	r3, fp
 80010e2:	4622      	mov	r2, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	4630      	mov	r0, r6
 80010e8:	f7ff ff93 	bl	8001012 <__sfputs_r>
 80010ec:	3001      	adds	r0, #1
 80010ee:	f000 80aa 	beq.w	8001246 <_vfiprintf_r+0x20e>
 80010f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010f4:	445a      	add	r2, fp
 80010f6:	9209      	str	r2, [sp, #36]	; 0x24
 80010f8:	f89a 3000 	ldrb.w	r3, [sl]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a2 	beq.w	8001246 <_vfiprintf_r+0x20e>
 8001102:	2300      	movs	r3, #0
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800110c:	f10a 0a01 	add.w	sl, sl, #1
 8001110:	9304      	str	r3, [sp, #16]
 8001112:	9307      	str	r3, [sp, #28]
 8001114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001118:	931a      	str	r3, [sp, #104]	; 0x68
 800111a:	4654      	mov	r4, sl
 800111c:	2205      	movs	r2, #5
 800111e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001122:	4858      	ldr	r0, [pc, #352]	; (8001284 <_vfiprintf_r+0x24c>)
 8001124:	f000 fb48 	bl	80017b8 <memchr>
 8001128:	9a04      	ldr	r2, [sp, #16]
 800112a:	b9d8      	cbnz	r0, 8001164 <_vfiprintf_r+0x12c>
 800112c:	06d1      	lsls	r1, r2, #27
 800112e:	bf44      	itt	mi
 8001130:	2320      	movmi	r3, #32
 8001132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001136:	0713      	lsls	r3, r2, #28
 8001138:	bf44      	itt	mi
 800113a:	232b      	movmi	r3, #43	; 0x2b
 800113c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001140:	f89a 3000 	ldrb.w	r3, [sl]
 8001144:	2b2a      	cmp	r3, #42	; 0x2a
 8001146:	d015      	beq.n	8001174 <_vfiprintf_r+0x13c>
 8001148:	4654      	mov	r4, sl
 800114a:	2000      	movs	r0, #0
 800114c:	f04f 0c0a 	mov.w	ip, #10
 8001150:	9a07      	ldr	r2, [sp, #28]
 8001152:	4621      	mov	r1, r4
 8001154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001158:	3b30      	subs	r3, #48	; 0x30
 800115a:	2b09      	cmp	r3, #9
 800115c:	d94e      	bls.n	80011fc <_vfiprintf_r+0x1c4>
 800115e:	b1b0      	cbz	r0, 800118e <_vfiprintf_r+0x156>
 8001160:	9207      	str	r2, [sp, #28]
 8001162:	e014      	b.n	800118e <_vfiprintf_r+0x156>
 8001164:	eba0 0308 	sub.w	r3, r0, r8
 8001168:	fa09 f303 	lsl.w	r3, r9, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	46a2      	mov	sl, r4
 8001170:	9304      	str	r3, [sp, #16]
 8001172:	e7d2      	b.n	800111a <_vfiprintf_r+0xe2>
 8001174:	9b03      	ldr	r3, [sp, #12]
 8001176:	1d19      	adds	r1, r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	9103      	str	r1, [sp, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	bfbb      	ittet	lt
 8001180:	425b      	neglt	r3, r3
 8001182:	f042 0202 	orrlt.w	r2, r2, #2
 8001186:	9307      	strge	r3, [sp, #28]
 8001188:	9307      	strlt	r3, [sp, #28]
 800118a:	bfb8      	it	lt
 800118c:	9204      	strlt	r2, [sp, #16]
 800118e:	7823      	ldrb	r3, [r4, #0]
 8001190:	2b2e      	cmp	r3, #46	; 0x2e
 8001192:	d10c      	bne.n	80011ae <_vfiprintf_r+0x176>
 8001194:	7863      	ldrb	r3, [r4, #1]
 8001196:	2b2a      	cmp	r3, #42	; 0x2a
 8001198:	d135      	bne.n	8001206 <_vfiprintf_r+0x1ce>
 800119a:	9b03      	ldr	r3, [sp, #12]
 800119c:	3402      	adds	r4, #2
 800119e:	1d1a      	adds	r2, r3, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	9203      	str	r2, [sp, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	bfb8      	it	lt
 80011a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80011ac:	9305      	str	r3, [sp, #20]
 80011ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001288 <_vfiprintf_r+0x250>
 80011b2:	2203      	movs	r2, #3
 80011b4:	4650      	mov	r0, sl
 80011b6:	7821      	ldrb	r1, [r4, #0]
 80011b8:	f000 fafe 	bl	80017b8 <memchr>
 80011bc:	b140      	cbz	r0, 80011d0 <_vfiprintf_r+0x198>
 80011be:	2340      	movs	r3, #64	; 0x40
 80011c0:	eba0 000a 	sub.w	r0, r0, sl
 80011c4:	fa03 f000 	lsl.w	r0, r3, r0
 80011c8:	9b04      	ldr	r3, [sp, #16]
 80011ca:	3401      	adds	r4, #1
 80011cc:	4303      	orrs	r3, r0
 80011ce:	9304      	str	r3, [sp, #16]
 80011d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011d4:	2206      	movs	r2, #6
 80011d6:	482d      	ldr	r0, [pc, #180]	; (800128c <_vfiprintf_r+0x254>)
 80011d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011dc:	f000 faec 	bl	80017b8 <memchr>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d03f      	beq.n	8001264 <_vfiprintf_r+0x22c>
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <_vfiprintf_r+0x258>)
 80011e6:	bb1b      	cbnz	r3, 8001230 <_vfiprintf_r+0x1f8>
 80011e8:	9b03      	ldr	r3, [sp, #12]
 80011ea:	3307      	adds	r3, #7
 80011ec:	f023 0307 	bic.w	r3, r3, #7
 80011f0:	3308      	adds	r3, #8
 80011f2:	9303      	str	r3, [sp, #12]
 80011f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011f6:	443b      	add	r3, r7
 80011f8:	9309      	str	r3, [sp, #36]	; 0x24
 80011fa:	e767      	b.n	80010cc <_vfiprintf_r+0x94>
 80011fc:	460c      	mov	r4, r1
 80011fe:	2001      	movs	r0, #1
 8001200:	fb0c 3202 	mla	r2, ip, r2, r3
 8001204:	e7a5      	b.n	8001152 <_vfiprintf_r+0x11a>
 8001206:	2300      	movs	r3, #0
 8001208:	f04f 0c0a 	mov.w	ip, #10
 800120c:	4619      	mov	r1, r3
 800120e:	3401      	adds	r4, #1
 8001210:	9305      	str	r3, [sp, #20]
 8001212:	4620      	mov	r0, r4
 8001214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001218:	3a30      	subs	r2, #48	; 0x30
 800121a:	2a09      	cmp	r2, #9
 800121c:	d903      	bls.n	8001226 <_vfiprintf_r+0x1ee>
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0c5      	beq.n	80011ae <_vfiprintf_r+0x176>
 8001222:	9105      	str	r1, [sp, #20]
 8001224:	e7c3      	b.n	80011ae <_vfiprintf_r+0x176>
 8001226:	4604      	mov	r4, r0
 8001228:	2301      	movs	r3, #1
 800122a:	fb0c 2101 	mla	r1, ip, r1, r2
 800122e:	e7f0      	b.n	8001212 <_vfiprintf_r+0x1da>
 8001230:	ab03      	add	r3, sp, #12
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	462a      	mov	r2, r5
 8001236:	4630      	mov	r0, r6
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <_vfiprintf_r+0x25c>)
 800123a:	a904      	add	r1, sp, #16
 800123c:	f3af 8000 	nop.w
 8001240:	4607      	mov	r7, r0
 8001242:	1c78      	adds	r0, r7, #1
 8001244:	d1d6      	bne.n	80011f4 <_vfiprintf_r+0x1bc>
 8001246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001248:	07d9      	lsls	r1, r3, #31
 800124a:	d405      	bmi.n	8001258 <_vfiprintf_r+0x220>
 800124c:	89ab      	ldrh	r3, [r5, #12]
 800124e:	059a      	lsls	r2, r3, #22
 8001250:	d402      	bmi.n	8001258 <_vfiprintf_r+0x220>
 8001252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001254:	f7ff fd7d 	bl	8000d52 <__retarget_lock_release_recursive>
 8001258:	89ab      	ldrh	r3, [r5, #12]
 800125a:	065b      	lsls	r3, r3, #25
 800125c:	f53f af12 	bmi.w	8001084 <_vfiprintf_r+0x4c>
 8001260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001262:	e711      	b.n	8001088 <_vfiprintf_r+0x50>
 8001264:	ab03      	add	r3, sp, #12
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	462a      	mov	r2, r5
 800126a:	4630      	mov	r0, r6
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <_vfiprintf_r+0x25c>)
 800126e:	a904      	add	r1, sp, #16
 8001270:	f000 f882 	bl	8001378 <_printf_i>
 8001274:	e7e4      	b.n	8001240 <_vfiprintf_r+0x208>
 8001276:	bf00      	nop
 8001278:	080019f0 	.word	0x080019f0
 800127c:	08001a10 	.word	0x08001a10
 8001280:	080019d0 	.word	0x080019d0
 8001284:	08001a30 	.word	0x08001a30
 8001288:	08001a36 	.word	0x08001a36
 800128c:	08001a3a 	.word	0x08001a3a
 8001290:	00000000 	.word	0x00000000
 8001294:	08001013 	.word	0x08001013

08001298 <_printf_common>:
 8001298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800129c:	4616      	mov	r6, r2
 800129e:	4699      	mov	r9, r3
 80012a0:	688a      	ldr	r2, [r1, #8]
 80012a2:	690b      	ldr	r3, [r1, #16]
 80012a4:	4607      	mov	r7, r0
 80012a6:	4293      	cmp	r3, r2
 80012a8:	bfb8      	it	lt
 80012aa:	4613      	movlt	r3, r2
 80012ac:	6033      	str	r3, [r6, #0]
 80012ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012b2:	460c      	mov	r4, r1
 80012b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012b8:	b10a      	cbz	r2, 80012be <_printf_common+0x26>
 80012ba:	3301      	adds	r3, #1
 80012bc:	6033      	str	r3, [r6, #0]
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	0699      	lsls	r1, r3, #26
 80012c2:	bf42      	ittt	mi
 80012c4:	6833      	ldrmi	r3, [r6, #0]
 80012c6:	3302      	addmi	r3, #2
 80012c8:	6033      	strmi	r3, [r6, #0]
 80012ca:	6825      	ldr	r5, [r4, #0]
 80012cc:	f015 0506 	ands.w	r5, r5, #6
 80012d0:	d106      	bne.n	80012e0 <_printf_common+0x48>
 80012d2:	f104 0a19 	add.w	sl, r4, #25
 80012d6:	68e3      	ldr	r3, [r4, #12]
 80012d8:	6832      	ldr	r2, [r6, #0]
 80012da:	1a9b      	subs	r3, r3, r2
 80012dc:	42ab      	cmp	r3, r5
 80012de:	dc28      	bgt.n	8001332 <_printf_common+0x9a>
 80012e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012e4:	1e13      	subs	r3, r2, #0
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	bf18      	it	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	0692      	lsls	r2, r2, #26
 80012ee:	d42d      	bmi.n	800134c <_printf_common+0xb4>
 80012f0:	4649      	mov	r1, r9
 80012f2:	4638      	mov	r0, r7
 80012f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012f8:	47c0      	blx	r8
 80012fa:	3001      	adds	r0, #1
 80012fc:	d020      	beq.n	8001340 <_printf_common+0xa8>
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	68e5      	ldr	r5, [r4, #12]
 8001302:	f003 0306 	and.w	r3, r3, #6
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf18      	it	ne
 800130a:	2500      	movne	r5, #0
 800130c:	6832      	ldr	r2, [r6, #0]
 800130e:	f04f 0600 	mov.w	r6, #0
 8001312:	68a3      	ldr	r3, [r4, #8]
 8001314:	bf08      	it	eq
 8001316:	1aad      	subeq	r5, r5, r2
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	bf08      	it	eq
 800131c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001320:	4293      	cmp	r3, r2
 8001322:	bfc4      	itt	gt
 8001324:	1a9b      	subgt	r3, r3, r2
 8001326:	18ed      	addgt	r5, r5, r3
 8001328:	341a      	adds	r4, #26
 800132a:	42b5      	cmp	r5, r6
 800132c:	d11a      	bne.n	8001364 <_printf_common+0xcc>
 800132e:	2000      	movs	r0, #0
 8001330:	e008      	b.n	8001344 <_printf_common+0xac>
 8001332:	2301      	movs	r3, #1
 8001334:	4652      	mov	r2, sl
 8001336:	4649      	mov	r1, r9
 8001338:	4638      	mov	r0, r7
 800133a:	47c0      	blx	r8
 800133c:	3001      	adds	r0, #1
 800133e:	d103      	bne.n	8001348 <_printf_common+0xb0>
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001348:	3501      	adds	r5, #1
 800134a:	e7c4      	b.n	80012d6 <_printf_common+0x3e>
 800134c:	2030      	movs	r0, #48	; 0x30
 800134e:	18e1      	adds	r1, r4, r3
 8001350:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800135a:	4422      	add	r2, r4
 800135c:	3302      	adds	r3, #2
 800135e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001362:	e7c5      	b.n	80012f0 <_printf_common+0x58>
 8001364:	2301      	movs	r3, #1
 8001366:	4622      	mov	r2, r4
 8001368:	4649      	mov	r1, r9
 800136a:	4638      	mov	r0, r7
 800136c:	47c0      	blx	r8
 800136e:	3001      	adds	r0, #1
 8001370:	d0e6      	beq.n	8001340 <_printf_common+0xa8>
 8001372:	3601      	adds	r6, #1
 8001374:	e7d9      	b.n	800132a <_printf_common+0x92>
	...

08001378 <_printf_i>:
 8001378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800137c:	7e0f      	ldrb	r7, [r1, #24]
 800137e:	4691      	mov	r9, r2
 8001380:	2f78      	cmp	r7, #120	; 0x78
 8001382:	4680      	mov	r8, r0
 8001384:	460c      	mov	r4, r1
 8001386:	469a      	mov	sl, r3
 8001388:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800138a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800138e:	d807      	bhi.n	80013a0 <_printf_i+0x28>
 8001390:	2f62      	cmp	r7, #98	; 0x62
 8001392:	d80a      	bhi.n	80013aa <_printf_i+0x32>
 8001394:	2f00      	cmp	r7, #0
 8001396:	f000 80d9 	beq.w	800154c <_printf_i+0x1d4>
 800139a:	2f58      	cmp	r7, #88	; 0x58
 800139c:	f000 80a4 	beq.w	80014e8 <_printf_i+0x170>
 80013a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013a8:	e03a      	b.n	8001420 <_printf_i+0xa8>
 80013aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013ae:	2b15      	cmp	r3, #21
 80013b0:	d8f6      	bhi.n	80013a0 <_printf_i+0x28>
 80013b2:	a101      	add	r1, pc, #4	; (adr r1, 80013b8 <_printf_i+0x40>)
 80013b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013b8:	08001411 	.word	0x08001411
 80013bc:	08001425 	.word	0x08001425
 80013c0:	080013a1 	.word	0x080013a1
 80013c4:	080013a1 	.word	0x080013a1
 80013c8:	080013a1 	.word	0x080013a1
 80013cc:	080013a1 	.word	0x080013a1
 80013d0:	08001425 	.word	0x08001425
 80013d4:	080013a1 	.word	0x080013a1
 80013d8:	080013a1 	.word	0x080013a1
 80013dc:	080013a1 	.word	0x080013a1
 80013e0:	080013a1 	.word	0x080013a1
 80013e4:	08001533 	.word	0x08001533
 80013e8:	08001455 	.word	0x08001455
 80013ec:	08001515 	.word	0x08001515
 80013f0:	080013a1 	.word	0x080013a1
 80013f4:	080013a1 	.word	0x080013a1
 80013f8:	08001555 	.word	0x08001555
 80013fc:	080013a1 	.word	0x080013a1
 8001400:	08001455 	.word	0x08001455
 8001404:	080013a1 	.word	0x080013a1
 8001408:	080013a1 	.word	0x080013a1
 800140c:	0800151d 	.word	0x0800151d
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	1d1a      	adds	r2, r3, #4
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	602a      	str	r2, [r5, #0]
 8001418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800141c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001420:	2301      	movs	r3, #1
 8001422:	e0a4      	b.n	800156e <_printf_i+0x1f6>
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	6829      	ldr	r1, [r5, #0]
 8001428:	0606      	lsls	r6, r0, #24
 800142a:	f101 0304 	add.w	r3, r1, #4
 800142e:	d50a      	bpl.n	8001446 <_printf_i+0xce>
 8001430:	680e      	ldr	r6, [r1, #0]
 8001432:	602b      	str	r3, [r5, #0]
 8001434:	2e00      	cmp	r6, #0
 8001436:	da03      	bge.n	8001440 <_printf_i+0xc8>
 8001438:	232d      	movs	r3, #45	; 0x2d
 800143a:	4276      	negs	r6, r6
 800143c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001440:	230a      	movs	r3, #10
 8001442:	485e      	ldr	r0, [pc, #376]	; (80015bc <_printf_i+0x244>)
 8001444:	e019      	b.n	800147a <_printf_i+0x102>
 8001446:	680e      	ldr	r6, [r1, #0]
 8001448:	f010 0f40 	tst.w	r0, #64	; 0x40
 800144c:	602b      	str	r3, [r5, #0]
 800144e:	bf18      	it	ne
 8001450:	b236      	sxthne	r6, r6
 8001452:	e7ef      	b.n	8001434 <_printf_i+0xbc>
 8001454:	682b      	ldr	r3, [r5, #0]
 8001456:	6820      	ldr	r0, [r4, #0]
 8001458:	1d19      	adds	r1, r3, #4
 800145a:	6029      	str	r1, [r5, #0]
 800145c:	0601      	lsls	r1, r0, #24
 800145e:	d501      	bpl.n	8001464 <_printf_i+0xec>
 8001460:	681e      	ldr	r6, [r3, #0]
 8001462:	e002      	b.n	800146a <_printf_i+0xf2>
 8001464:	0646      	lsls	r6, r0, #25
 8001466:	d5fb      	bpl.n	8001460 <_printf_i+0xe8>
 8001468:	881e      	ldrh	r6, [r3, #0]
 800146a:	2f6f      	cmp	r7, #111	; 0x6f
 800146c:	bf0c      	ite	eq
 800146e:	2308      	moveq	r3, #8
 8001470:	230a      	movne	r3, #10
 8001472:	4852      	ldr	r0, [pc, #328]	; (80015bc <_printf_i+0x244>)
 8001474:	2100      	movs	r1, #0
 8001476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800147a:	6865      	ldr	r5, [r4, #4]
 800147c:	2d00      	cmp	r5, #0
 800147e:	bfa8      	it	ge
 8001480:	6821      	ldrge	r1, [r4, #0]
 8001482:	60a5      	str	r5, [r4, #8]
 8001484:	bfa4      	itt	ge
 8001486:	f021 0104 	bicge.w	r1, r1, #4
 800148a:	6021      	strge	r1, [r4, #0]
 800148c:	b90e      	cbnz	r6, 8001492 <_printf_i+0x11a>
 800148e:	2d00      	cmp	r5, #0
 8001490:	d04d      	beq.n	800152e <_printf_i+0x1b6>
 8001492:	4615      	mov	r5, r2
 8001494:	fbb6 f1f3 	udiv	r1, r6, r3
 8001498:	fb03 6711 	mls	r7, r3, r1, r6
 800149c:	5dc7      	ldrb	r7, [r0, r7]
 800149e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014a2:	4637      	mov	r7, r6
 80014a4:	42bb      	cmp	r3, r7
 80014a6:	460e      	mov	r6, r1
 80014a8:	d9f4      	bls.n	8001494 <_printf_i+0x11c>
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d10b      	bne.n	80014c6 <_printf_i+0x14e>
 80014ae:	6823      	ldr	r3, [r4, #0]
 80014b0:	07de      	lsls	r6, r3, #31
 80014b2:	d508      	bpl.n	80014c6 <_printf_i+0x14e>
 80014b4:	6923      	ldr	r3, [r4, #16]
 80014b6:	6861      	ldr	r1, [r4, #4]
 80014b8:	4299      	cmp	r1, r3
 80014ba:	bfde      	ittt	le
 80014bc:	2330      	movle	r3, #48	; 0x30
 80014be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80014c6:	1b52      	subs	r2, r2, r5
 80014c8:	6122      	str	r2, [r4, #16]
 80014ca:	464b      	mov	r3, r9
 80014cc:	4621      	mov	r1, r4
 80014ce:	4640      	mov	r0, r8
 80014d0:	f8cd a000 	str.w	sl, [sp]
 80014d4:	aa03      	add	r2, sp, #12
 80014d6:	f7ff fedf 	bl	8001298 <_printf_common>
 80014da:	3001      	adds	r0, #1
 80014dc:	d14c      	bne.n	8001578 <_printf_i+0x200>
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	b004      	add	sp, #16
 80014e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014e8:	4834      	ldr	r0, [pc, #208]	; (80015bc <_printf_i+0x244>)
 80014ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80014ee:	6829      	ldr	r1, [r5, #0]
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80014f6:	6029      	str	r1, [r5, #0]
 80014f8:	061d      	lsls	r5, r3, #24
 80014fa:	d514      	bpl.n	8001526 <_printf_i+0x1ae>
 80014fc:	07df      	lsls	r7, r3, #31
 80014fe:	bf44      	itt	mi
 8001500:	f043 0320 	orrmi.w	r3, r3, #32
 8001504:	6023      	strmi	r3, [r4, #0]
 8001506:	b91e      	cbnz	r6, 8001510 <_printf_i+0x198>
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	f023 0320 	bic.w	r3, r3, #32
 800150e:	6023      	str	r3, [r4, #0]
 8001510:	2310      	movs	r3, #16
 8001512:	e7af      	b.n	8001474 <_printf_i+0xfc>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	f043 0320 	orr.w	r3, r3, #32
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	2378      	movs	r3, #120	; 0x78
 800151e:	4828      	ldr	r0, [pc, #160]	; (80015c0 <_printf_i+0x248>)
 8001520:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001524:	e7e3      	b.n	80014ee <_printf_i+0x176>
 8001526:	0659      	lsls	r1, r3, #25
 8001528:	bf48      	it	mi
 800152a:	b2b6      	uxthmi	r6, r6
 800152c:	e7e6      	b.n	80014fc <_printf_i+0x184>
 800152e:	4615      	mov	r5, r2
 8001530:	e7bb      	b.n	80014aa <_printf_i+0x132>
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	6826      	ldr	r6, [r4, #0]
 8001536:	1d18      	adds	r0, r3, #4
 8001538:	6961      	ldr	r1, [r4, #20]
 800153a:	6028      	str	r0, [r5, #0]
 800153c:	0635      	lsls	r5, r6, #24
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	d501      	bpl.n	8001546 <_printf_i+0x1ce>
 8001542:	6019      	str	r1, [r3, #0]
 8001544:	e002      	b.n	800154c <_printf_i+0x1d4>
 8001546:	0670      	lsls	r0, r6, #25
 8001548:	d5fb      	bpl.n	8001542 <_printf_i+0x1ca>
 800154a:	8019      	strh	r1, [r3, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	4615      	mov	r5, r2
 8001550:	6123      	str	r3, [r4, #16]
 8001552:	e7ba      	b.n	80014ca <_printf_i+0x152>
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	2100      	movs	r1, #0
 8001558:	1d1a      	adds	r2, r3, #4
 800155a:	602a      	str	r2, [r5, #0]
 800155c:	681d      	ldr	r5, [r3, #0]
 800155e:	6862      	ldr	r2, [r4, #4]
 8001560:	4628      	mov	r0, r5
 8001562:	f000 f929 	bl	80017b8 <memchr>
 8001566:	b108      	cbz	r0, 800156c <_printf_i+0x1f4>
 8001568:	1b40      	subs	r0, r0, r5
 800156a:	6060      	str	r0, [r4, #4]
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	6123      	str	r3, [r4, #16]
 8001570:	2300      	movs	r3, #0
 8001572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001576:	e7a8      	b.n	80014ca <_printf_i+0x152>
 8001578:	462a      	mov	r2, r5
 800157a:	4649      	mov	r1, r9
 800157c:	4640      	mov	r0, r8
 800157e:	6923      	ldr	r3, [r4, #16]
 8001580:	47d0      	blx	sl
 8001582:	3001      	adds	r0, #1
 8001584:	d0ab      	beq.n	80014de <_printf_i+0x166>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	079b      	lsls	r3, r3, #30
 800158a:	d413      	bmi.n	80015b4 <_printf_i+0x23c>
 800158c:	68e0      	ldr	r0, [r4, #12]
 800158e:	9b03      	ldr	r3, [sp, #12]
 8001590:	4298      	cmp	r0, r3
 8001592:	bfb8      	it	lt
 8001594:	4618      	movlt	r0, r3
 8001596:	e7a4      	b.n	80014e2 <_printf_i+0x16a>
 8001598:	2301      	movs	r3, #1
 800159a:	4632      	mov	r2, r6
 800159c:	4649      	mov	r1, r9
 800159e:	4640      	mov	r0, r8
 80015a0:	47d0      	blx	sl
 80015a2:	3001      	adds	r0, #1
 80015a4:	d09b      	beq.n	80014de <_printf_i+0x166>
 80015a6:	3501      	adds	r5, #1
 80015a8:	68e3      	ldr	r3, [r4, #12]
 80015aa:	9903      	ldr	r1, [sp, #12]
 80015ac:	1a5b      	subs	r3, r3, r1
 80015ae:	42ab      	cmp	r3, r5
 80015b0:	dcf2      	bgt.n	8001598 <_printf_i+0x220>
 80015b2:	e7eb      	b.n	800158c <_printf_i+0x214>
 80015b4:	2500      	movs	r5, #0
 80015b6:	f104 0619 	add.w	r6, r4, #25
 80015ba:	e7f5      	b.n	80015a8 <_printf_i+0x230>
 80015bc:	08001a41 	.word	0x08001a41
 80015c0:	08001a52 	.word	0x08001a52

080015c4 <_putc_r>:
 80015c4:	b570      	push	{r4, r5, r6, lr}
 80015c6:	460d      	mov	r5, r1
 80015c8:	4614      	mov	r4, r2
 80015ca:	4606      	mov	r6, r0
 80015cc:	b118      	cbz	r0, 80015d6 <_putc_r+0x12>
 80015ce:	6983      	ldr	r3, [r0, #24]
 80015d0:	b90b      	cbnz	r3, 80015d6 <_putc_r+0x12>
 80015d2:	f7ff fb0d 	bl	8000bf0 <__sinit>
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <_putc_r+0x84>)
 80015d8:	429c      	cmp	r4, r3
 80015da:	d124      	bne.n	8001626 <_putc_r+0x62>
 80015dc:	6874      	ldr	r4, [r6, #4]
 80015de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015e0:	07d8      	lsls	r0, r3, #31
 80015e2:	d405      	bmi.n	80015f0 <_putc_r+0x2c>
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	0599      	lsls	r1, r3, #22
 80015e8:	d402      	bmi.n	80015f0 <_putc_r+0x2c>
 80015ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015ec:	f7ff fbb0 	bl	8000d50 <__retarget_lock_acquire_recursive>
 80015f0:	68a3      	ldr	r3, [r4, #8]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	60a3      	str	r3, [r4, #8]
 80015f8:	da05      	bge.n	8001606 <_putc_r+0x42>
 80015fa:	69a2      	ldr	r2, [r4, #24]
 80015fc:	4293      	cmp	r3, r2
 80015fe:	db1c      	blt.n	800163a <_putc_r+0x76>
 8001600:	b2eb      	uxtb	r3, r5
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d019      	beq.n	800163a <_putc_r+0x76>
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	6022      	str	r2, [r4, #0]
 800160c:	701d      	strb	r5, [r3, #0]
 800160e:	b2ed      	uxtb	r5, r5
 8001610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001612:	07da      	lsls	r2, r3, #31
 8001614:	d405      	bmi.n	8001622 <_putc_r+0x5e>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	059b      	lsls	r3, r3, #22
 800161a:	d402      	bmi.n	8001622 <_putc_r+0x5e>
 800161c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800161e:	f7ff fb98 	bl	8000d52 <__retarget_lock_release_recursive>
 8001622:	4628      	mov	r0, r5
 8001624:	bd70      	pop	{r4, r5, r6, pc}
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <_putc_r+0x88>)
 8001628:	429c      	cmp	r4, r3
 800162a:	d101      	bne.n	8001630 <_putc_r+0x6c>
 800162c:	68b4      	ldr	r4, [r6, #8]
 800162e:	e7d6      	b.n	80015de <_putc_r+0x1a>
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <_putc_r+0x8c>)
 8001632:	429c      	cmp	r4, r3
 8001634:	bf08      	it	eq
 8001636:	68f4      	ldreq	r4, [r6, #12]
 8001638:	e7d1      	b.n	80015de <_putc_r+0x1a>
 800163a:	4629      	mov	r1, r5
 800163c:	4622      	mov	r2, r4
 800163e:	4630      	mov	r0, r6
 8001640:	f7ff f8e2 	bl	8000808 <__swbuf_r>
 8001644:	4605      	mov	r5, r0
 8001646:	e7e3      	b.n	8001610 <_putc_r+0x4c>
 8001648:	080019f0 	.word	0x080019f0
 800164c:	08001a10 	.word	0x08001a10
 8001650:	080019d0 	.word	0x080019d0

08001654 <_sbrk_r>:
 8001654:	b538      	push	{r3, r4, r5, lr}
 8001656:	2300      	movs	r3, #0
 8001658:	4d05      	ldr	r5, [pc, #20]	; (8001670 <_sbrk_r+0x1c>)
 800165a:	4604      	mov	r4, r0
 800165c:	4608      	mov	r0, r1
 800165e:	602b      	str	r3, [r5, #0]
 8001660:	f7fe ff60 	bl	8000524 <_sbrk>
 8001664:	1c43      	adds	r3, r0, #1
 8001666:	d102      	bne.n	800166e <_sbrk_r+0x1a>
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	b103      	cbz	r3, 800166e <_sbrk_r+0x1a>
 800166c:	6023      	str	r3, [r4, #0]
 800166e:	bd38      	pop	{r3, r4, r5, pc}
 8001670:	200000d8 	.word	0x200000d8

08001674 <__sread>:
 8001674:	b510      	push	{r4, lr}
 8001676:	460c      	mov	r4, r1
 8001678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800167c:	f000 f8b6 	bl	80017ec <_read_r>
 8001680:	2800      	cmp	r0, #0
 8001682:	bfab      	itete	ge
 8001684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001686:	89a3      	ldrhlt	r3, [r4, #12]
 8001688:	181b      	addge	r3, r3, r0
 800168a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800168e:	bfac      	ite	ge
 8001690:	6563      	strge	r3, [r4, #84]	; 0x54
 8001692:	81a3      	strhlt	r3, [r4, #12]
 8001694:	bd10      	pop	{r4, pc}

08001696 <__swrite>:
 8001696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169a:	461f      	mov	r7, r3
 800169c:	898b      	ldrh	r3, [r1, #12]
 800169e:	4605      	mov	r5, r0
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	460c      	mov	r4, r1
 80016a4:	4616      	mov	r6, r2
 80016a6:	d505      	bpl.n	80016b4 <__swrite+0x1e>
 80016a8:	2302      	movs	r3, #2
 80016aa:	2200      	movs	r2, #0
 80016ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016b0:	f000 f870 	bl	8001794 <_lseek_r>
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	4632      	mov	r2, r6
 80016b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016bc:	81a3      	strh	r3, [r4, #12]
 80016be:	4628      	mov	r0, r5
 80016c0:	463b      	mov	r3, r7
 80016c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016ca:	f000 b817 	b.w	80016fc <_write_r>

080016ce <__sseek>:
 80016ce:	b510      	push	{r4, lr}
 80016d0:	460c      	mov	r4, r1
 80016d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016d6:	f000 f85d 	bl	8001794 <_lseek_r>
 80016da:	1c43      	adds	r3, r0, #1
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	bf15      	itete	ne
 80016e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80016e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80016e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80016ea:	81a3      	strheq	r3, [r4, #12]
 80016ec:	bf18      	it	ne
 80016ee:	81a3      	strhne	r3, [r4, #12]
 80016f0:	bd10      	pop	{r4, pc}

080016f2 <__sclose>:
 80016f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016f6:	f000 b81b 	b.w	8001730 <_close_r>
	...

080016fc <_write_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	2200      	movs	r2, #0
 8001706:	4d05      	ldr	r5, [pc, #20]	; (800171c <_write_r+0x20>)
 8001708:	602a      	str	r2, [r5, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	f7fe febe 	bl	800048c <_write>
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	d102      	bne.n	800171a <_write_r+0x1e>
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	b103      	cbz	r3, 800171a <_write_r+0x1e>
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	bd38      	pop	{r3, r4, r5, pc}
 800171c:	200000d8 	.word	0x200000d8

08001720 <abort>:
 8001720:	2006      	movs	r0, #6
 8001722:	b508      	push	{r3, lr}
 8001724:	f000 f89c 	bl	8001860 <raise>
 8001728:	2001      	movs	r0, #1
 800172a:	f7fe fe88 	bl	800043e <_exit>
	...

08001730 <_close_r>:
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	2300      	movs	r3, #0
 8001734:	4d05      	ldr	r5, [pc, #20]	; (800174c <_close_r+0x1c>)
 8001736:	4604      	mov	r4, r0
 8001738:	4608      	mov	r0, r1
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	f7fe fec2 	bl	80004c4 <_close>
 8001740:	1c43      	adds	r3, r0, #1
 8001742:	d102      	bne.n	800174a <_close_r+0x1a>
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	b103      	cbz	r3, 800174a <_close_r+0x1a>
 8001748:	6023      	str	r3, [r4, #0]
 800174a:	bd38      	pop	{r3, r4, r5, pc}
 800174c:	200000d8 	.word	0x200000d8

08001750 <_fstat_r>:
 8001750:	b538      	push	{r3, r4, r5, lr}
 8001752:	2300      	movs	r3, #0
 8001754:	4d06      	ldr	r5, [pc, #24]	; (8001770 <_fstat_r+0x20>)
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	602b      	str	r3, [r5, #0]
 800175e:	f7fe febc 	bl	80004da <_fstat>
 8001762:	1c43      	adds	r3, r0, #1
 8001764:	d102      	bne.n	800176c <_fstat_r+0x1c>
 8001766:	682b      	ldr	r3, [r5, #0]
 8001768:	b103      	cbz	r3, 800176c <_fstat_r+0x1c>
 800176a:	6023      	str	r3, [r4, #0]
 800176c:	bd38      	pop	{r3, r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	200000d8 	.word	0x200000d8

08001774 <_isatty_r>:
 8001774:	b538      	push	{r3, r4, r5, lr}
 8001776:	2300      	movs	r3, #0
 8001778:	4d05      	ldr	r5, [pc, #20]	; (8001790 <_isatty_r+0x1c>)
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	f7fe feba 	bl	80004f8 <_isatty>
 8001784:	1c43      	adds	r3, r0, #1
 8001786:	d102      	bne.n	800178e <_isatty_r+0x1a>
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	b103      	cbz	r3, 800178e <_isatty_r+0x1a>
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	bd38      	pop	{r3, r4, r5, pc}
 8001790:	200000d8 	.word	0x200000d8

08001794 <_lseek_r>:
 8001794:	b538      	push	{r3, r4, r5, lr}
 8001796:	4604      	mov	r4, r0
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	2200      	movs	r2, #0
 800179e:	4d05      	ldr	r5, [pc, #20]	; (80017b4 <_lseek_r+0x20>)
 80017a0:	602a      	str	r2, [r5, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f7fe feb2 	bl	800050c <_lseek>
 80017a8:	1c43      	adds	r3, r0, #1
 80017aa:	d102      	bne.n	80017b2 <_lseek_r+0x1e>
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	b103      	cbz	r3, 80017b2 <_lseek_r+0x1e>
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
 80017b4:	200000d8 	.word	0x200000d8

080017b8 <memchr>:
 80017b8:	4603      	mov	r3, r0
 80017ba:	b510      	push	{r4, lr}
 80017bc:	b2c9      	uxtb	r1, r1
 80017be:	4402      	add	r2, r0
 80017c0:	4293      	cmp	r3, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	d101      	bne.n	80017ca <memchr+0x12>
 80017c6:	2000      	movs	r0, #0
 80017c8:	e003      	b.n	80017d2 <memchr+0x1a>
 80017ca:	7804      	ldrb	r4, [r0, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	428c      	cmp	r4, r1
 80017d0:	d1f6      	bne.n	80017c0 <memchr+0x8>
 80017d2:	bd10      	pop	{r4, pc}

080017d4 <__malloc_lock>:
 80017d4:	4801      	ldr	r0, [pc, #4]	; (80017dc <__malloc_lock+0x8>)
 80017d6:	f7ff babb 	b.w	8000d50 <__retarget_lock_acquire_recursive>
 80017da:	bf00      	nop
 80017dc:	200000cc 	.word	0x200000cc

080017e0 <__malloc_unlock>:
 80017e0:	4801      	ldr	r0, [pc, #4]	; (80017e8 <__malloc_unlock+0x8>)
 80017e2:	f7ff bab6 	b.w	8000d52 <__retarget_lock_release_recursive>
 80017e6:	bf00      	nop
 80017e8:	200000cc 	.word	0x200000cc

080017ec <_read_r>:
 80017ec:	b538      	push	{r3, r4, r5, lr}
 80017ee:	4604      	mov	r4, r0
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	2200      	movs	r2, #0
 80017f6:	4d05      	ldr	r5, [pc, #20]	; (800180c <_read_r+0x20>)
 80017f8:	602a      	str	r2, [r5, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	f7fe fe29 	bl	8000452 <_read>
 8001800:	1c43      	adds	r3, r0, #1
 8001802:	d102      	bne.n	800180a <_read_r+0x1e>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	b103      	cbz	r3, 800180a <_read_r+0x1e>
 8001808:	6023      	str	r3, [r4, #0]
 800180a:	bd38      	pop	{r3, r4, r5, pc}
 800180c:	200000d8 	.word	0x200000d8

08001810 <_raise_r>:
 8001810:	291f      	cmp	r1, #31
 8001812:	b538      	push	{r3, r4, r5, lr}
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	d904      	bls.n	8001824 <_raise_r+0x14>
 800181a:	2316      	movs	r3, #22
 800181c:	6003      	str	r3, [r0, #0]
 800181e:	f04f 30ff 	mov.w	r0, #4294967295
 8001822:	bd38      	pop	{r3, r4, r5, pc}
 8001824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001826:	b112      	cbz	r2, 800182e <_raise_r+0x1e>
 8001828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800182c:	b94b      	cbnz	r3, 8001842 <_raise_r+0x32>
 800182e:	4620      	mov	r0, r4
 8001830:	f000 f830 	bl	8001894 <_getpid_r>
 8001834:	462a      	mov	r2, r5
 8001836:	4601      	mov	r1, r0
 8001838:	4620      	mov	r0, r4
 800183a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800183e:	f000 b817 	b.w	8001870 <_kill_r>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d00a      	beq.n	800185c <_raise_r+0x4c>
 8001846:	1c59      	adds	r1, r3, #1
 8001848:	d103      	bne.n	8001852 <_raise_r+0x42>
 800184a:	2316      	movs	r3, #22
 800184c:	6003      	str	r3, [r0, #0]
 800184e:	2001      	movs	r0, #1
 8001850:	e7e7      	b.n	8001822 <_raise_r+0x12>
 8001852:	2400      	movs	r4, #0
 8001854:	4628      	mov	r0, r5
 8001856:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800185a:	4798      	blx	r3
 800185c:	2000      	movs	r0, #0
 800185e:	e7e0      	b.n	8001822 <_raise_r+0x12>

08001860 <raise>:
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <raise+0xc>)
 8001862:	4601      	mov	r1, r0
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	f7ff bfd3 	b.w	8001810 <_raise_r>
 800186a:	bf00      	nop
 800186c:	20000044 	.word	0x20000044

08001870 <_kill_r>:
 8001870:	b538      	push	{r3, r4, r5, lr}
 8001872:	2300      	movs	r3, #0
 8001874:	4d06      	ldr	r5, [pc, #24]	; (8001890 <_kill_r+0x20>)
 8001876:	4604      	mov	r4, r0
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	602b      	str	r3, [r5, #0]
 800187e:	f7fe fdce 	bl	800041e <_kill>
 8001882:	1c43      	adds	r3, r0, #1
 8001884:	d102      	bne.n	800188c <_kill_r+0x1c>
 8001886:	682b      	ldr	r3, [r5, #0]
 8001888:	b103      	cbz	r3, 800188c <_kill_r+0x1c>
 800188a:	6023      	str	r3, [r4, #0]
 800188c:	bd38      	pop	{r3, r4, r5, pc}
 800188e:	bf00      	nop
 8001890:	200000d8 	.word	0x200000d8

08001894 <_getpid_r>:
 8001894:	f7fe bdbc 	b.w	8000410 <_getpid>

08001898 <_init>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	bf00      	nop
 800189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189e:	bc08      	pop	{r3}
 80018a0:	469e      	mov	lr, r3
 80018a2:	4770      	bx	lr

080018a4 <_fini>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr
