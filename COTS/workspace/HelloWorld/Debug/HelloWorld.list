
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001694  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  080017c4  080017c4  000117c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001970  08001970  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08001970  08001970  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001970  08001970  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001974  08001974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08001978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200000a8  08001a20  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001a20  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b57  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d1  00000000  00000000  00020c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00021000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00021140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b1b  00000000  00000000  00021248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014de  00000000  00000000  00023d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009408  00000000  00000000  00025241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f20  00000000  00000000  0002e69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a8 	.word	0x200000a8
 800014c:	00000000 	.word	0x00000000
 8000150:	080017ac 	.word	0x080017ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000ac 	.word	0x200000ac
 800016c:	080017ac 	.word	0x080017ac

08000170 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData ;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
 800017e:	e015      	b.n	80001ac <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000180:	f000 fa8e 	bl	80006a0 <rand>
 8000184:	4602      	mov	r2, r0
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	6879      	ldr	r1, [r7, #4]
 800018c:	4419      	add	r1, r3
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <array_fill_numbers+0x50>)
 8000190:	fb83 0302 	smull	r0, r3, r3, r2
 8000194:	1198      	asrs	r0, r3, #6
 8000196:	17d3      	asrs	r3, r2, #31
 8000198:	1ac3      	subs	r3, r0, r3
 800019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019e:	fb00 f303 	mul.w	r3, r0, r3
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	3301      	adds	r3, #1
 80001aa:	60fb      	str	r3, [r7, #12]
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d3e5      	bcc.n	8000180 <array_fill_numbers+0x10>
    }
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	10624dd3 	.word	0x10624dd3

080001c4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
	someData = 10;
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <display_numbers+0x50>)
 80001d2:	220a      	movs	r2, #10
 80001d4:	601a      	str	r2, [r3, #0]
    printf("%s", pMessage);
 80001d6:	6879      	ldr	r1, [r7, #4]
 80001d8:	480f      	ldr	r0, [pc, #60]	; (8000218 <display_numbers+0x54>)
 80001da:	f000 fa35 	bl	8000648 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e00b      	b.n	80001fc <display_numbers+0x38>
    {
        printf("%5d  ",pNumbers[i]);
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	4413      	add	r3, r2
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4619      	mov	r1, r3
 80001f0:	480a      	ldr	r0, [pc, #40]	; (800021c <display_numbers+0x58>)
 80001f2:	f000 fa29 	bl	8000648 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	3301      	adds	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
 80001fc:	697a      	ldr	r2, [r7, #20]
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3ef      	bcc.n	80001e4 <display_numbers+0x20>
    }
    printf("\n");
 8000204:	200a      	movs	r0, #10
 8000206:	f000 fa37 	bl	8000678 <putchar>
}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	200000c4 	.word	0x200000c4
 8000218:	080017c4 	.word	0x080017c4
 800021c:	080017c8 	.word	0x080017c8

08000220 <swap_numbers>:

void swap_numbers(int *x,int *y)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	//void (*FuncPtr)(void)=(void*)0x20000008;
	//FuncPtr();
     int temp = *x;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	60fb      	str	r3, [r7, #12]
     *x = *y;
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	601a      	str	r2, [r3, #0]
     *y = temp;
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	601a      	str	r2, [r3, #0]
}
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <bubble_sort>:

void bubble_sort(int *pNumbers , unsigned int len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
    int i,j,flag=0;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < len-1; i++)
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	e02f      	b.n	80002bc <bubble_sort+0x74>
    {
        flag=0;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	e01d      	b.n	80002a2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	3301      	adds	r3, #1
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	6879      	ldr	r1, [r7, #4]
 8000278:	440b      	add	r3, r1
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	dd0d      	ble.n	800029c <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	18d0      	adds	r0, r2, r3
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	3301      	adds	r3, #1
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	4413      	add	r3, r2
 8000292:	4619      	mov	r1, r3
 8000294:	f7ff ffc4 	bl	8000220 <swap_numbers>
                flag=1;
 8000298:	2301      	movs	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	3301      	adds	r3, #1
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	1e5a      	subs	r2, r3, #1
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d8da      	bhi.n	8000266 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d008      	beq.n	80002c8 <bubble_sort+0x80>
    for(i = 0; i < len-1; i++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d8ca      	bhi.n	800025c <bubble_sort+0x14>
            break;
    }
}
 80002c6:	e000      	b.n	80002ca <bubble_sort+0x82>
            break;
 80002c8:	bf00      	nop
}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b087      	sub	sp, #28
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	6039      	str	r1, [r7, #0]
     int i,j,num;

     for(i=1 ; i < len ; i++)
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	e02c      	b.n	800033c <insertion_sort+0x6a>
     {
         j = i-1;
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 80002f4:	e00d      	b.n	8000312 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	441a      	add	r2, r3
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	3301      	adds	r3, #1
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	440b      	add	r3, r1
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	601a      	str	r2, [r3, #0]
             j--;
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	3b01      	subs	r3, #1
 8000310:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b00      	cmp	r3, #0
 8000316:	db07      	blt.n	8000328 <insertion_sort+0x56>
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbe6      	blt.n	80002f6 <insertion_sort+0x24>
         }
         pNumbers[j+1] = num;
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	3301      	adds	r3, #1
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]
     for(i=1 ; i < len ; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d8ce      	bhi.n	80002e2 <insertion_sort+0x10>
     }
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	371c      	adds	r7, #28
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <main>:


int main()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
    unsigned int len = sizeof(numbers)/sizeof(int);
 8000356:	2311      	movs	r3, #17
 8000358:	607b      	str	r3, [r7, #4]

    printf("Hello");
 800035a:	4814      	ldr	r0, [pc, #80]	; (80003ac <main+0x5c>)
 800035c:	f000 f974 	bl	8000648 <iprintf>

    array_fill_numbers(numbers,len);
 8000360:	6879      	ldr	r1, [r7, #4]
 8000362:	4813      	ldr	r0, [pc, #76]	; (80003b0 <main+0x60>)
 8000364:	f7ff ff04 	bl	8000170 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000368:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <main+0x64>)
 800036a:	6879      	ldr	r1, [r7, #4]
 800036c:	4810      	ldr	r0, [pc, #64]	; (80003b0 <main+0x60>)
 800036e:	f7ff ff29 	bl	80001c4 <display_numbers>

    bubble_sort(numbers,len);
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <main+0x60>)
 8000376:	f7ff ff67 	bl	8000248 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 800037a:	4a0f      	ldr	r2, [pc, #60]	; (80003b8 <main+0x68>)
 800037c:	6879      	ldr	r1, [r7, #4]
 800037e:	480c      	ldr	r0, [pc, #48]	; (80003b0 <main+0x60>)
 8000380:	f7ff ff20 	bl	80001c4 <display_numbers>

    array_fill_numbers(numbers,len);
 8000384:	6879      	ldr	r1, [r7, #4]
 8000386:	480a      	ldr	r0, [pc, #40]	; (80003b0 <main+0x60>)
 8000388:	f7ff fef2 	bl	8000170 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 800038c:	4a0b      	ldr	r2, [pc, #44]	; (80003bc <main+0x6c>)
 800038e:	6879      	ldr	r1, [r7, #4]
 8000390:	4807      	ldr	r0, [pc, #28]	; (80003b0 <main+0x60>)
 8000392:	f7ff ff17 	bl	80001c4 <display_numbers>

    insertion_sort(numbers,len);
 8000396:	6879      	ldr	r1, [r7, #4]
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <main+0x60>)
 800039a:	f7ff ff9a 	bl	80002d2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <main+0x70>)
 80003a0:	6879      	ldr	r1, [r7, #4]
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <main+0x60>)
 80003a4:	f7ff ff0e 	bl	80001c4 <display_numbers>

    while(1);
 80003a8:	e7fe      	b.n	80003a8 <main+0x58>
 80003aa:	bf00      	nop
 80003ac:	080017d0 	.word	0x080017d0
 80003b0:	20000000 	.word	0x20000000
 80003b4:	080017d8 	.word	0x080017d8
 80003b8:	080017ec 	.word	0x080017ec
 80003bc:	08001800 	.word	0x08001800
 80003c0:	08001814 	.word	0x08001814

080003c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <ITM_SendChar+0x44>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <ITM_SendChar+0x44>)
 80003d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <ITM_SendChar+0x48>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a0b      	ldr	r2, [pc, #44]	; (800040c <ITM_SendChar+0x48>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80003e6:	bf00      	nop
 80003e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f8      	beq.n	80003e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80003f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	e000edfc 	.word	0xe000edfc
 800040c:	e0000e00 	.word	0xe0000e00

08000410 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return 1;
 8000414:	2301      	movs	r3, #1
}
 8000416:	4618      	mov	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <_kill>:

int _kill(int pid, int sig)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000428:	f000 f8dc 	bl	80005e4 <__errno>
 800042c:	4603      	mov	r3, r0
 800042e:	2216      	movs	r2, #22
 8000430:	601a      	str	r2, [r3, #0]
  return -1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000436:	4618      	mov	r0, r3
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_exit>:

void _exit (int status)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b082      	sub	sp, #8
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000446:	f04f 31ff 	mov.w	r1, #4294967295
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f7ff ffe7 	bl	800041e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000450:	e7fe      	b.n	8000450 <_exit+0x12>

08000452 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	60f8      	str	r0, [r7, #12]
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	e00a      	b.n	800047a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000464:	f3af 8000 	nop.w
 8000468:	4601      	mov	r1, r0
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	60ba      	str	r2, [r7, #8]
 8000470:	b2ca      	uxtb	r2, r1
 8000472:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	3301      	adds	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	429a      	cmp	r2, r3
 8000480:	dbf0      	blt.n	8000464 <_read+0x12>
  }

  return len;
 8000482:	687b      	ldr	r3, [r7, #4]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af00      	add	r7, sp, #0
 8000492:	60f8      	str	r0, [r7, #12]
 8000494:	60b9      	str	r1, [r7, #8]
 8000496:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	e009      	b.n	80004b2 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	1c5a      	adds	r2, r3, #1
 80004a2:	60ba      	str	r2, [r7, #8]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff8c 	bl	80003c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	3301      	adds	r3, #1
 80004b0:	617b      	str	r3, [r7, #20]
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	429a      	cmp	r2, r3
 80004b8:	dbf1      	blt.n	800049e <_write+0x12>
  }
  return len;
 80004ba:	687b      	ldr	r3, [r7, #4]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <_close>:

int _close(int file)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr

080004da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
 80004e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ea:	605a      	str	r2, [r3, #4]
  return 0;
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr

080004f8 <_isatty>:

int _isatty(int file)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <_sbrk+0x5c>)
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <_sbrk+0x60>)
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <_sbrk+0x64>)
 8000542:	4a12      	ldr	r2, [pc, #72]	; (800058c <_sbrk+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <_sbrk+0x64>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4413      	add	r3, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	429a      	cmp	r2, r3
 8000552:	d207      	bcs.n	8000564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000554:	f000 f846 	bl	80005e4 <__errno>
 8000558:	4603      	mov	r3, r0
 800055a:	220c      	movs	r2, #12
 800055c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055e:	f04f 33ff 	mov.w	r3, #4294967295
 8000562:	e009      	b.n	8000578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000564:	4b08      	ldr	r3, [pc, #32]	; (8000588 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <_sbrk+0x64>)
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <_sbrk+0x64>)
 8000574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000576:	68fb      	ldr	r3, [r7, #12]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20005000 	.word	0x20005000
 8000584:	00000400 	.word	0x00000400
 8000588:	200000c8 	.word	0x200000c8
 800058c:	200000e0 	.word	0x200000e0

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 f817 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fec5 	bl	8000350 <main>

080005c6 <LoopForever>:

LoopForever:
  b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80005d4:	08001978 	.word	0x08001978
  ldr r2, =_sbss
 80005d8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80005dc:	200000dc 	.word	0x200000dc

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <__errno>:
 80005e4:	4b01      	ldr	r3, [pc, #4]	; (80005ec <__errno+0x8>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000044 	.word	0x20000044

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2600      	movs	r6, #0
 80005f4:	4d0c      	ldr	r5, [pc, #48]	; (8000628 <__libc_init_array+0x38>)
 80005f6:	4c0d      	ldr	r4, [pc, #52]	; (800062c <__libc_init_array+0x3c>)
 80005f8:	1b64      	subs	r4, r4, r5
 80005fa:	10a4      	asrs	r4, r4, #2
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	f001 f8d4 	bl	80017ac <_init>
 8000604:	2600      	movs	r6, #0
 8000606:	4d0a      	ldr	r5, [pc, #40]	; (8000630 <__libc_init_array+0x40>)
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <__libc_init_array+0x44>)
 800060a:	1b64      	subs	r4, r4, r5
 800060c:	10a4      	asrs	r4, r4, #2
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08001970 	.word	0x08001970
 800062c:	08001970 	.word	0x08001970
 8000630:	08001970 	.word	0x08001970
 8000634:	08001974 	.word	0x08001974

08000638 <memset>:
 8000638:	4603      	mov	r3, r0
 800063a:	4402      	add	r2, r0
 800063c:	4293      	cmp	r3, r2
 800063e:	d100      	bne.n	8000642 <memset+0xa>
 8000640:	4770      	bx	lr
 8000642:	f803 1b01 	strb.w	r1, [r3], #1
 8000646:	e7f9      	b.n	800063c <memset+0x4>

08000648 <iprintf>:
 8000648:	b40f      	push	{r0, r1, r2, r3}
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <iprintf+0x2c>)
 800064c:	b513      	push	{r0, r1, r4, lr}
 800064e:	681c      	ldr	r4, [r3, #0]
 8000650:	b124      	cbz	r4, 800065c <iprintf+0x14>
 8000652:	69a3      	ldr	r3, [r4, #24]
 8000654:	b913      	cbnz	r3, 800065c <iprintf+0x14>
 8000656:	4620      	mov	r0, r4
 8000658:	f000 f8d6 	bl	8000808 <__sinit>
 800065c:	ab05      	add	r3, sp, #20
 800065e:	4620      	mov	r0, r4
 8000660:	9a04      	ldr	r2, [sp, #16]
 8000662:	68a1      	ldr	r1, [r4, #8]
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	f000 fa8d 	bl	8000b84 <_vfiprintf_r>
 800066a:	b002      	add	sp, #8
 800066c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000670:	b004      	add	sp, #16
 8000672:	4770      	bx	lr
 8000674:	20000044 	.word	0x20000044

08000678 <putchar>:
 8000678:	b538      	push	{r3, r4, r5, lr}
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <putchar+0x24>)
 800067c:	4605      	mov	r5, r0
 800067e:	681c      	ldr	r4, [r3, #0]
 8000680:	b124      	cbz	r4, 800068c <putchar+0x14>
 8000682:	69a3      	ldr	r3, [r4, #24]
 8000684:	b913      	cbnz	r3, 800068c <putchar+0x14>
 8000686:	4620      	mov	r0, r4
 8000688:	f000 f8be 	bl	8000808 <__sinit>
 800068c:	4629      	mov	r1, r5
 800068e:	4620      	mov	r0, r4
 8000690:	68a2      	ldr	r2, [r4, #8]
 8000692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000696:	f000 bd3b 	b.w	8001110 <_putc_r>
 800069a:	bf00      	nop
 800069c:	20000044 	.word	0x20000044

080006a0 <rand>:
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <rand+0x5c>)
 80006a2:	b510      	push	{r4, lr}
 80006a4:	681c      	ldr	r4, [r3, #0]
 80006a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006a8:	b9b3      	cbnz	r3, 80006d8 <rand+0x38>
 80006aa:	2018      	movs	r0, #24
 80006ac:	f000 f95e 	bl	800096c <malloc>
 80006b0:	4602      	mov	r2, r0
 80006b2:	63a0      	str	r0, [r4, #56]	; 0x38
 80006b4:	b920      	cbnz	r0, 80006c0 <rand+0x20>
 80006b6:	214e      	movs	r1, #78	; 0x4e
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <rand+0x60>)
 80006ba:	4812      	ldr	r0, [pc, #72]	; (8000704 <rand+0x64>)
 80006bc:	f000 f82e 	bl	800071c <__assert_func>
 80006c0:	4911      	ldr	r1, [pc, #68]	; (8000708 <rand+0x68>)
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <rand+0x6c>)
 80006c4:	e9c0 1300 	strd	r1, r3, [r0]
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <rand+0x70>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	6083      	str	r3, [r0, #8]
 80006ce:	230b      	movs	r3, #11
 80006d0:	8183      	strh	r3, [r0, #12]
 80006d2:	2001      	movs	r0, #1
 80006d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80006d8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <rand+0x74>)
 80006dc:	6920      	ldr	r0, [r4, #16]
 80006de:	6963      	ldr	r3, [r4, #20]
 80006e0:	4342      	muls	r2, r0
 80006e2:	490d      	ldr	r1, [pc, #52]	; (8000718 <rand+0x78>)
 80006e4:	fb01 2203 	mla	r2, r1, r3, r2
 80006e8:	fba0 0101 	umull	r0, r1, r0, r1
 80006ec:	1c43      	adds	r3, r0, #1
 80006ee:	eb42 0001 	adc.w	r0, r2, r1
 80006f2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80006f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	20000044 	.word	0x20000044
 8000700:	0800182c 	.word	0x0800182c
 8000704:	08001843 	.word	0x08001843
 8000708:	abcd330e 	.word	0xabcd330e
 800070c:	e66d1234 	.word	0xe66d1234
 8000710:	0005deec 	.word	0x0005deec
 8000714:	5851f42d 	.word	0x5851f42d
 8000718:	4c957f2d 	.word	0x4c957f2d

0800071c <__assert_func>:
 800071c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800071e:	4614      	mov	r4, r2
 8000720:	461a      	mov	r2, r3
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <__assert_func+0x2c>)
 8000724:	4605      	mov	r5, r0
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68d8      	ldr	r0, [r3, #12]
 800072a:	b14c      	cbz	r4, 8000740 <__assert_func+0x24>
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <__assert_func+0x30>)
 800072e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000732:	9100      	str	r1, [sp, #0]
 8000734:	462b      	mov	r3, r5
 8000736:	4906      	ldr	r1, [pc, #24]	; (8000750 <__assert_func+0x34>)
 8000738:	f000 f8e4 	bl	8000904 <fiprintf>
 800073c:	f000 fe56 	bl	80013ec <abort>
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <__assert_func+0x38>)
 8000742:	461c      	mov	r4, r3
 8000744:	e7f3      	b.n	800072e <__assert_func+0x12>
 8000746:	bf00      	nop
 8000748:	20000044 	.word	0x20000044
 800074c:	0800189e 	.word	0x0800189e
 8000750:	080018ab 	.word	0x080018ab
 8000754:	080018d9 	.word	0x080018d9

08000758 <std>:
 8000758:	2300      	movs	r3, #0
 800075a:	b510      	push	{r4, lr}
 800075c:	4604      	mov	r4, r0
 800075e:	e9c0 3300 	strd	r3, r3, [r0]
 8000762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000766:	6083      	str	r3, [r0, #8]
 8000768:	8181      	strh	r1, [r0, #12]
 800076a:	6643      	str	r3, [r0, #100]	; 0x64
 800076c:	81c2      	strh	r2, [r0, #14]
 800076e:	6183      	str	r3, [r0, #24]
 8000770:	4619      	mov	r1, r3
 8000772:	2208      	movs	r2, #8
 8000774:	305c      	adds	r0, #92	; 0x5c
 8000776:	f7ff ff5f 	bl	8000638 <memset>
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <std+0x38>)
 800077c:	6224      	str	r4, [r4, #32]
 800077e:	6263      	str	r3, [r4, #36]	; 0x24
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <std+0x3c>)
 8000782:	62a3      	str	r3, [r4, #40]	; 0x28
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <std+0x40>)
 8000786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <std+0x44>)
 800078a:	6323      	str	r3, [r4, #48]	; 0x30
 800078c:	bd10      	pop	{r4, pc}
 800078e:	bf00      	nop
 8000790:	080011c1 	.word	0x080011c1
 8000794:	080011e3 	.word	0x080011e3
 8000798:	0800121b 	.word	0x0800121b
 800079c:	0800123f 	.word	0x0800123f

080007a0 <_cleanup_r>:
 80007a0:	4901      	ldr	r1, [pc, #4]	; (80007a8 <_cleanup_r+0x8>)
 80007a2:	f000 b8c1 	b.w	8000928 <_fwalk_reent>
 80007a6:	bf00      	nop
 80007a8:	08001521 	.word	0x08001521

080007ac <__sfmoreglue>:
 80007ac:	2268      	movs	r2, #104	; 0x68
 80007ae:	b570      	push	{r4, r5, r6, lr}
 80007b0:	1e4d      	subs	r5, r1, #1
 80007b2:	4355      	muls	r5, r2
 80007b4:	460e      	mov	r6, r1
 80007b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007ba:	f000 f947 	bl	8000a4c <_malloc_r>
 80007be:	4604      	mov	r4, r0
 80007c0:	b140      	cbz	r0, 80007d4 <__sfmoreglue+0x28>
 80007c2:	2100      	movs	r1, #0
 80007c4:	e9c0 1600 	strd	r1, r6, [r0]
 80007c8:	300c      	adds	r0, #12
 80007ca:	60a0      	str	r0, [r4, #8]
 80007cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80007d0:	f7ff ff32 	bl	8000638 <memset>
 80007d4:	4620      	mov	r0, r4
 80007d6:	bd70      	pop	{r4, r5, r6, pc}

080007d8 <__sfp_lock_acquire>:
 80007d8:	4801      	ldr	r0, [pc, #4]	; (80007e0 <__sfp_lock_acquire+0x8>)
 80007da:	f000 b8c5 	b.w	8000968 <__retarget_lock_acquire_recursive>
 80007de:	bf00      	nop
 80007e0:	200000cd 	.word	0x200000cd

080007e4 <__sfp_lock_release>:
 80007e4:	4801      	ldr	r0, [pc, #4]	; (80007ec <__sfp_lock_release+0x8>)
 80007e6:	f000 b8c0 	b.w	800096a <__retarget_lock_release_recursive>
 80007ea:	bf00      	nop
 80007ec:	200000cd 	.word	0x200000cd

080007f0 <__sinit_lock_acquire>:
 80007f0:	4801      	ldr	r0, [pc, #4]	; (80007f8 <__sinit_lock_acquire+0x8>)
 80007f2:	f000 b8b9 	b.w	8000968 <__retarget_lock_acquire_recursive>
 80007f6:	bf00      	nop
 80007f8:	200000ce 	.word	0x200000ce

080007fc <__sinit_lock_release>:
 80007fc:	4801      	ldr	r0, [pc, #4]	; (8000804 <__sinit_lock_release+0x8>)
 80007fe:	f000 b8b4 	b.w	800096a <__retarget_lock_release_recursive>
 8000802:	bf00      	nop
 8000804:	200000ce 	.word	0x200000ce

08000808 <__sinit>:
 8000808:	b510      	push	{r4, lr}
 800080a:	4604      	mov	r4, r0
 800080c:	f7ff fff0 	bl	80007f0 <__sinit_lock_acquire>
 8000810:	69a3      	ldr	r3, [r4, #24]
 8000812:	b11b      	cbz	r3, 800081c <__sinit+0x14>
 8000814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000818:	f7ff bff0 	b.w	80007fc <__sinit_lock_release>
 800081c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000820:	6523      	str	r3, [r4, #80]	; 0x50
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <__sinit+0x68>)
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <__sinit+0x6c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	62a2      	str	r2, [r4, #40]	; 0x28
 800082a:	42a3      	cmp	r3, r4
 800082c:	bf08      	it	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	4620      	mov	r0, r4
 8000832:	bf08      	it	eq
 8000834:	61a3      	streq	r3, [r4, #24]
 8000836:	f000 f81f 	bl	8000878 <__sfp>
 800083a:	6060      	str	r0, [r4, #4]
 800083c:	4620      	mov	r0, r4
 800083e:	f000 f81b 	bl	8000878 <__sfp>
 8000842:	60a0      	str	r0, [r4, #8]
 8000844:	4620      	mov	r0, r4
 8000846:	f000 f817 	bl	8000878 <__sfp>
 800084a:	2200      	movs	r2, #0
 800084c:	2104      	movs	r1, #4
 800084e:	60e0      	str	r0, [r4, #12]
 8000850:	6860      	ldr	r0, [r4, #4]
 8000852:	f7ff ff81 	bl	8000758 <std>
 8000856:	2201      	movs	r2, #1
 8000858:	2109      	movs	r1, #9
 800085a:	68a0      	ldr	r0, [r4, #8]
 800085c:	f7ff ff7c 	bl	8000758 <std>
 8000860:	2202      	movs	r2, #2
 8000862:	2112      	movs	r1, #18
 8000864:	68e0      	ldr	r0, [r4, #12]
 8000866:	f7ff ff77 	bl	8000758 <std>
 800086a:	2301      	movs	r3, #1
 800086c:	61a3      	str	r3, [r4, #24]
 800086e:	e7d1      	b.n	8000814 <__sinit+0xc>
 8000870:	08001828 	.word	0x08001828
 8000874:	080007a1 	.word	0x080007a1

08000878 <__sfp>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	4607      	mov	r7, r0
 800087c:	f7ff ffac 	bl	80007d8 <__sfp_lock_acquire>
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <__sfp+0x84>)
 8000882:	681e      	ldr	r6, [r3, #0]
 8000884:	69b3      	ldr	r3, [r6, #24]
 8000886:	b913      	cbnz	r3, 800088e <__sfp+0x16>
 8000888:	4630      	mov	r0, r6
 800088a:	f7ff ffbd 	bl	8000808 <__sinit>
 800088e:	3648      	adds	r6, #72	; 0x48
 8000890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000894:	3b01      	subs	r3, #1
 8000896:	d503      	bpl.n	80008a0 <__sfp+0x28>
 8000898:	6833      	ldr	r3, [r6, #0]
 800089a:	b30b      	cbz	r3, 80008e0 <__sfp+0x68>
 800089c:	6836      	ldr	r6, [r6, #0]
 800089e:	e7f7      	b.n	8000890 <__sfp+0x18>
 80008a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008a4:	b9d5      	cbnz	r5, 80008dc <__sfp+0x64>
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <__sfp+0x88>)
 80008a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008ac:	60e3      	str	r3, [r4, #12]
 80008ae:	6665      	str	r5, [r4, #100]	; 0x64
 80008b0:	f000 f859 	bl	8000966 <__retarget_lock_init_recursive>
 80008b4:	f7ff ff96 	bl	80007e4 <__sfp_lock_release>
 80008b8:	2208      	movs	r2, #8
 80008ba:	4629      	mov	r1, r5
 80008bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008c4:	6025      	str	r5, [r4, #0]
 80008c6:	61a5      	str	r5, [r4, #24]
 80008c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80008cc:	f7ff feb4 	bl	8000638 <memset>
 80008d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80008d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80008d8:	4620      	mov	r0, r4
 80008da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008dc:	3468      	adds	r4, #104	; 0x68
 80008de:	e7d9      	b.n	8000894 <__sfp+0x1c>
 80008e0:	2104      	movs	r1, #4
 80008e2:	4638      	mov	r0, r7
 80008e4:	f7ff ff62 	bl	80007ac <__sfmoreglue>
 80008e8:	4604      	mov	r4, r0
 80008ea:	6030      	str	r0, [r6, #0]
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d1d5      	bne.n	800089c <__sfp+0x24>
 80008f0:	f7ff ff78 	bl	80007e4 <__sfp_lock_release>
 80008f4:	230c      	movs	r3, #12
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	e7ee      	b.n	80008d8 <__sfp+0x60>
 80008fa:	bf00      	nop
 80008fc:	08001828 	.word	0x08001828
 8000900:	ffff0001 	.word	0xffff0001

08000904 <fiprintf>:
 8000904:	b40e      	push	{r1, r2, r3}
 8000906:	b503      	push	{r0, r1, lr}
 8000908:	4601      	mov	r1, r0
 800090a:	ab03      	add	r3, sp, #12
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <fiprintf+0x20>)
 800090e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000912:	6800      	ldr	r0, [r0, #0]
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	f000 f935 	bl	8000b84 <_vfiprintf_r>
 800091a:	b002      	add	sp, #8
 800091c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000920:	b003      	add	sp, #12
 8000922:	4770      	bx	lr
 8000924:	20000044 	.word	0x20000044

08000928 <_fwalk_reent>:
 8000928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800092c:	4606      	mov	r6, r0
 800092e:	4688      	mov	r8, r1
 8000930:	2700      	movs	r7, #0
 8000932:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000936:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800093a:	f1b9 0901 	subs.w	r9, r9, #1
 800093e:	d505      	bpl.n	800094c <_fwalk_reent+0x24>
 8000940:	6824      	ldr	r4, [r4, #0]
 8000942:	2c00      	cmp	r4, #0
 8000944:	d1f7      	bne.n	8000936 <_fwalk_reent+0xe>
 8000946:	4638      	mov	r0, r7
 8000948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800094c:	89ab      	ldrh	r3, [r5, #12]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d907      	bls.n	8000962 <_fwalk_reent+0x3a>
 8000952:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000956:	3301      	adds	r3, #1
 8000958:	d003      	beq.n	8000962 <_fwalk_reent+0x3a>
 800095a:	4629      	mov	r1, r5
 800095c:	4630      	mov	r0, r6
 800095e:	47c0      	blx	r8
 8000960:	4307      	orrs	r7, r0
 8000962:	3568      	adds	r5, #104	; 0x68
 8000964:	e7e9      	b.n	800093a <_fwalk_reent+0x12>

08000966 <__retarget_lock_init_recursive>:
 8000966:	4770      	bx	lr

08000968 <__retarget_lock_acquire_recursive>:
 8000968:	4770      	bx	lr

0800096a <__retarget_lock_release_recursive>:
 800096a:	4770      	bx	lr

0800096c <malloc>:
 800096c:	4b02      	ldr	r3, [pc, #8]	; (8000978 <malloc+0xc>)
 800096e:	4601      	mov	r1, r0
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	f000 b86b 	b.w	8000a4c <_malloc_r>
 8000976:	bf00      	nop
 8000978:	20000044 	.word	0x20000044

0800097c <_free_r>:
 800097c:	b538      	push	{r3, r4, r5, lr}
 800097e:	4605      	mov	r5, r0
 8000980:	2900      	cmp	r1, #0
 8000982:	d040      	beq.n	8000a06 <_free_r+0x8a>
 8000984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000988:	1f0c      	subs	r4, r1, #4
 800098a:	2b00      	cmp	r3, #0
 800098c:	bfb8      	it	lt
 800098e:	18e4      	addlt	r4, r4, r3
 8000990:	f000 fe88 	bl	80016a4 <__malloc_lock>
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <_free_r+0x8c>)
 8000996:	6813      	ldr	r3, [r2, #0]
 8000998:	b933      	cbnz	r3, 80009a8 <_free_r+0x2c>
 800099a:	6063      	str	r3, [r4, #4]
 800099c:	6014      	str	r4, [r2, #0]
 800099e:	4628      	mov	r0, r5
 80009a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009a4:	f000 be84 	b.w	80016b0 <__malloc_unlock>
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	d908      	bls.n	80009be <_free_r+0x42>
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	1821      	adds	r1, r4, r0
 80009b0:	428b      	cmp	r3, r1
 80009b2:	bf01      	itttt	eq
 80009b4:	6819      	ldreq	r1, [r3, #0]
 80009b6:	685b      	ldreq	r3, [r3, #4]
 80009b8:	1809      	addeq	r1, r1, r0
 80009ba:	6021      	streq	r1, [r4, #0]
 80009bc:	e7ed      	b.n	800099a <_free_r+0x1e>
 80009be:	461a      	mov	r2, r3
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	b10b      	cbz	r3, 80009c8 <_free_r+0x4c>
 80009c4:	42a3      	cmp	r3, r4
 80009c6:	d9fa      	bls.n	80009be <_free_r+0x42>
 80009c8:	6811      	ldr	r1, [r2, #0]
 80009ca:	1850      	adds	r0, r2, r1
 80009cc:	42a0      	cmp	r0, r4
 80009ce:	d10b      	bne.n	80009e8 <_free_r+0x6c>
 80009d0:	6820      	ldr	r0, [r4, #0]
 80009d2:	4401      	add	r1, r0
 80009d4:	1850      	adds	r0, r2, r1
 80009d6:	4283      	cmp	r3, r0
 80009d8:	6011      	str	r1, [r2, #0]
 80009da:	d1e0      	bne.n	800099e <_free_r+0x22>
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4401      	add	r1, r0
 80009e2:	6011      	str	r1, [r2, #0]
 80009e4:	6053      	str	r3, [r2, #4]
 80009e6:	e7da      	b.n	800099e <_free_r+0x22>
 80009e8:	d902      	bls.n	80009f0 <_free_r+0x74>
 80009ea:	230c      	movs	r3, #12
 80009ec:	602b      	str	r3, [r5, #0]
 80009ee:	e7d6      	b.n	800099e <_free_r+0x22>
 80009f0:	6820      	ldr	r0, [r4, #0]
 80009f2:	1821      	adds	r1, r4, r0
 80009f4:	428b      	cmp	r3, r1
 80009f6:	bf01      	itttt	eq
 80009f8:	6819      	ldreq	r1, [r3, #0]
 80009fa:	685b      	ldreq	r3, [r3, #4]
 80009fc:	1809      	addeq	r1, r1, r0
 80009fe:	6021      	streq	r1, [r4, #0]
 8000a00:	6063      	str	r3, [r4, #4]
 8000a02:	6054      	str	r4, [r2, #4]
 8000a04:	e7cb      	b.n	800099e <_free_r+0x22>
 8000a06:	bd38      	pop	{r3, r4, r5, pc}
 8000a08:	200000d0 	.word	0x200000d0

08000a0c <sbrk_aligned>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	4e0e      	ldr	r6, [pc, #56]	; (8000a48 <sbrk_aligned+0x3c>)
 8000a10:	460c      	mov	r4, r1
 8000a12:	6831      	ldr	r1, [r6, #0]
 8000a14:	4605      	mov	r5, r0
 8000a16:	b911      	cbnz	r1, 8000a1e <sbrk_aligned+0x12>
 8000a18:	f000 fbc2 	bl	80011a0 <_sbrk_r>
 8000a1c:	6030      	str	r0, [r6, #0]
 8000a1e:	4621      	mov	r1, r4
 8000a20:	4628      	mov	r0, r5
 8000a22:	f000 fbbd 	bl	80011a0 <_sbrk_r>
 8000a26:	1c43      	adds	r3, r0, #1
 8000a28:	d00a      	beq.n	8000a40 <sbrk_aligned+0x34>
 8000a2a:	1cc4      	adds	r4, r0, #3
 8000a2c:	f024 0403 	bic.w	r4, r4, #3
 8000a30:	42a0      	cmp	r0, r4
 8000a32:	d007      	beq.n	8000a44 <sbrk_aligned+0x38>
 8000a34:	1a21      	subs	r1, r4, r0
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 fbb2 	bl	80011a0 <_sbrk_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d101      	bne.n	8000a44 <sbrk_aligned+0x38>
 8000a40:	f04f 34ff 	mov.w	r4, #4294967295
 8000a44:	4620      	mov	r0, r4
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	200000d4 	.word	0x200000d4

08000a4c <_malloc_r>:
 8000a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a50:	1ccd      	adds	r5, r1, #3
 8000a52:	f025 0503 	bic.w	r5, r5, #3
 8000a56:	3508      	adds	r5, #8
 8000a58:	2d0c      	cmp	r5, #12
 8000a5a:	bf38      	it	cc
 8000a5c:	250c      	movcc	r5, #12
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	4607      	mov	r7, r0
 8000a62:	db01      	blt.n	8000a68 <_malloc_r+0x1c>
 8000a64:	42a9      	cmp	r1, r5
 8000a66:	d905      	bls.n	8000a74 <_malloc_r+0x28>
 8000a68:	230c      	movs	r3, #12
 8000a6a:	2600      	movs	r6, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	4630      	mov	r0, r6
 8000a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a74:	4e2e      	ldr	r6, [pc, #184]	; (8000b30 <_malloc_r+0xe4>)
 8000a76:	f000 fe15 	bl	80016a4 <__malloc_lock>
 8000a7a:	6833      	ldr	r3, [r6, #0]
 8000a7c:	461c      	mov	r4, r3
 8000a7e:	bb34      	cbnz	r4, 8000ace <_malloc_r+0x82>
 8000a80:	4629      	mov	r1, r5
 8000a82:	4638      	mov	r0, r7
 8000a84:	f7ff ffc2 	bl	8000a0c <sbrk_aligned>
 8000a88:	1c43      	adds	r3, r0, #1
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	d14d      	bne.n	8000b2a <_malloc_r+0xde>
 8000a8e:	6834      	ldr	r4, [r6, #0]
 8000a90:	4626      	mov	r6, r4
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d140      	bne.n	8000b18 <_malloc_r+0xcc>
 8000a96:	6823      	ldr	r3, [r4, #0]
 8000a98:	4631      	mov	r1, r6
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	eb04 0803 	add.w	r8, r4, r3
 8000aa0:	f000 fb7e 	bl	80011a0 <_sbrk_r>
 8000aa4:	4580      	cmp	r8, r0
 8000aa6:	d13a      	bne.n	8000b1e <_malloc_r+0xd2>
 8000aa8:	6821      	ldr	r1, [r4, #0]
 8000aaa:	3503      	adds	r5, #3
 8000aac:	1a6d      	subs	r5, r5, r1
 8000aae:	f025 0503 	bic.w	r5, r5, #3
 8000ab2:	3508      	adds	r5, #8
 8000ab4:	2d0c      	cmp	r5, #12
 8000ab6:	bf38      	it	cc
 8000ab8:	250c      	movcc	r5, #12
 8000aba:	4638      	mov	r0, r7
 8000abc:	4629      	mov	r1, r5
 8000abe:	f7ff ffa5 	bl	8000a0c <sbrk_aligned>
 8000ac2:	3001      	adds	r0, #1
 8000ac4:	d02b      	beq.n	8000b1e <_malloc_r+0xd2>
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	442b      	add	r3, r5
 8000aca:	6023      	str	r3, [r4, #0]
 8000acc:	e00e      	b.n	8000aec <_malloc_r+0xa0>
 8000ace:	6822      	ldr	r2, [r4, #0]
 8000ad0:	1b52      	subs	r2, r2, r5
 8000ad2:	d41e      	bmi.n	8000b12 <_malloc_r+0xc6>
 8000ad4:	2a0b      	cmp	r2, #11
 8000ad6:	d916      	bls.n	8000b06 <_malloc_r+0xba>
 8000ad8:	1961      	adds	r1, r4, r5
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	6025      	str	r5, [r4, #0]
 8000ade:	bf18      	it	ne
 8000ae0:	6059      	strne	r1, [r3, #4]
 8000ae2:	6863      	ldr	r3, [r4, #4]
 8000ae4:	bf08      	it	eq
 8000ae6:	6031      	streq	r1, [r6, #0]
 8000ae8:	5162      	str	r2, [r4, r5]
 8000aea:	604b      	str	r3, [r1, #4]
 8000aec:	4638      	mov	r0, r7
 8000aee:	f104 060b 	add.w	r6, r4, #11
 8000af2:	f000 fddd 	bl	80016b0 <__malloc_unlock>
 8000af6:	f026 0607 	bic.w	r6, r6, #7
 8000afa:	1d23      	adds	r3, r4, #4
 8000afc:	1af2      	subs	r2, r6, r3
 8000afe:	d0b6      	beq.n	8000a6e <_malloc_r+0x22>
 8000b00:	1b9b      	subs	r3, r3, r6
 8000b02:	50a3      	str	r3, [r4, r2]
 8000b04:	e7b3      	b.n	8000a6e <_malloc_r+0x22>
 8000b06:	6862      	ldr	r2, [r4, #4]
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	bf0c      	ite	eq
 8000b0c:	6032      	streq	r2, [r6, #0]
 8000b0e:	605a      	strne	r2, [r3, #4]
 8000b10:	e7ec      	b.n	8000aec <_malloc_r+0xa0>
 8000b12:	4623      	mov	r3, r4
 8000b14:	6864      	ldr	r4, [r4, #4]
 8000b16:	e7b2      	b.n	8000a7e <_malloc_r+0x32>
 8000b18:	4634      	mov	r4, r6
 8000b1a:	6876      	ldr	r6, [r6, #4]
 8000b1c:	e7b9      	b.n	8000a92 <_malloc_r+0x46>
 8000b1e:	230c      	movs	r3, #12
 8000b20:	4638      	mov	r0, r7
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	f000 fdc4 	bl	80016b0 <__malloc_unlock>
 8000b28:	e7a1      	b.n	8000a6e <_malloc_r+0x22>
 8000b2a:	6025      	str	r5, [r4, #0]
 8000b2c:	e7de      	b.n	8000aec <_malloc_r+0xa0>
 8000b2e:	bf00      	nop
 8000b30:	200000d0 	.word	0x200000d0

08000b34 <__sfputc_r>:
 8000b34:	6893      	ldr	r3, [r2, #8]
 8000b36:	b410      	push	{r4}
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	6093      	str	r3, [r2, #8]
 8000b3e:	da07      	bge.n	8000b50 <__sfputc_r+0x1c>
 8000b40:	6994      	ldr	r4, [r2, #24]
 8000b42:	42a3      	cmp	r3, r4
 8000b44:	db01      	blt.n	8000b4a <__sfputc_r+0x16>
 8000b46:	290a      	cmp	r1, #10
 8000b48:	d102      	bne.n	8000b50 <__sfputc_r+0x1c>
 8000b4a:	bc10      	pop	{r4}
 8000b4c:	f000 bb7c 	b.w	8001248 <__swbuf_r>
 8000b50:	6813      	ldr	r3, [r2, #0]
 8000b52:	1c58      	adds	r0, r3, #1
 8000b54:	6010      	str	r0, [r2, #0]
 8000b56:	7019      	strb	r1, [r3, #0]
 8000b58:	4608      	mov	r0, r1
 8000b5a:	bc10      	pop	{r4}
 8000b5c:	4770      	bx	lr

08000b5e <__sfputs_r>:
 8000b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b60:	4606      	mov	r6, r0
 8000b62:	460f      	mov	r7, r1
 8000b64:	4614      	mov	r4, r2
 8000b66:	18d5      	adds	r5, r2, r3
 8000b68:	42ac      	cmp	r4, r5
 8000b6a:	d101      	bne.n	8000b70 <__sfputs_r+0x12>
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	e007      	b.n	8000b80 <__sfputs_r+0x22>
 8000b70:	463a      	mov	r2, r7
 8000b72:	4630      	mov	r0, r6
 8000b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b78:	f7ff ffdc 	bl	8000b34 <__sfputc_r>
 8000b7c:	1c43      	adds	r3, r0, #1
 8000b7e:	d1f3      	bne.n	8000b68 <__sfputs_r+0xa>
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b84 <_vfiprintf_r>:
 8000b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b88:	460d      	mov	r5, r1
 8000b8a:	4614      	mov	r4, r2
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	4606      	mov	r6, r0
 8000b90:	b09d      	sub	sp, #116	; 0x74
 8000b92:	b118      	cbz	r0, 8000b9c <_vfiprintf_r+0x18>
 8000b94:	6983      	ldr	r3, [r0, #24]
 8000b96:	b90b      	cbnz	r3, 8000b9c <_vfiprintf_r+0x18>
 8000b98:	f7ff fe36 	bl	8000808 <__sinit>
 8000b9c:	4b89      	ldr	r3, [pc, #548]	; (8000dc4 <_vfiprintf_r+0x240>)
 8000b9e:	429d      	cmp	r5, r3
 8000ba0:	d11b      	bne.n	8000bda <_vfiprintf_r+0x56>
 8000ba2:	6875      	ldr	r5, [r6, #4]
 8000ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ba6:	07d9      	lsls	r1, r3, #31
 8000ba8:	d405      	bmi.n	8000bb6 <_vfiprintf_r+0x32>
 8000baa:	89ab      	ldrh	r3, [r5, #12]
 8000bac:	059a      	lsls	r2, r3, #22
 8000bae:	d402      	bmi.n	8000bb6 <_vfiprintf_r+0x32>
 8000bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bb2:	f7ff fed9 	bl	8000968 <__retarget_lock_acquire_recursive>
 8000bb6:	89ab      	ldrh	r3, [r5, #12]
 8000bb8:	071b      	lsls	r3, r3, #28
 8000bba:	d501      	bpl.n	8000bc0 <_vfiprintf_r+0x3c>
 8000bbc:	692b      	ldr	r3, [r5, #16]
 8000bbe:	b9eb      	cbnz	r3, 8000bfc <_vfiprintf_r+0x78>
 8000bc0:	4629      	mov	r1, r5
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f000 fba4 	bl	8001310 <__swsetup_r>
 8000bc8:	b1c0      	cbz	r0, 8000bfc <_vfiprintf_r+0x78>
 8000bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bcc:	07dc      	lsls	r4, r3, #31
 8000bce:	d50e      	bpl.n	8000bee <_vfiprintf_r+0x6a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	b01d      	add	sp, #116	; 0x74
 8000bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <_vfiprintf_r+0x244>)
 8000bdc:	429d      	cmp	r5, r3
 8000bde:	d101      	bne.n	8000be4 <_vfiprintf_r+0x60>
 8000be0:	68b5      	ldr	r5, [r6, #8]
 8000be2:	e7df      	b.n	8000ba4 <_vfiprintf_r+0x20>
 8000be4:	4b79      	ldr	r3, [pc, #484]	; (8000dcc <_vfiprintf_r+0x248>)
 8000be6:	429d      	cmp	r5, r3
 8000be8:	bf08      	it	eq
 8000bea:	68f5      	ldreq	r5, [r6, #12]
 8000bec:	e7da      	b.n	8000ba4 <_vfiprintf_r+0x20>
 8000bee:	89ab      	ldrh	r3, [r5, #12]
 8000bf0:	0598      	lsls	r0, r3, #22
 8000bf2:	d4ed      	bmi.n	8000bd0 <_vfiprintf_r+0x4c>
 8000bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bf6:	f7ff feb8 	bl	800096a <__retarget_lock_release_recursive>
 8000bfa:	e7e9      	b.n	8000bd0 <_vfiprintf_r+0x4c>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8000c00:	2320      	movs	r3, #32
 8000c02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c06:	2330      	movs	r3, #48	; 0x30
 8000c08:	f04f 0901 	mov.w	r9, #1
 8000c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c10:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000dd0 <_vfiprintf_r+0x24c>
 8000c14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c18:	4623      	mov	r3, r4
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c20:	b10a      	cbz	r2, 8000c26 <_vfiprintf_r+0xa2>
 8000c22:	2a25      	cmp	r2, #37	; 0x25
 8000c24:	d1f9      	bne.n	8000c1a <_vfiprintf_r+0x96>
 8000c26:	ebba 0b04 	subs.w	fp, sl, r4
 8000c2a:	d00b      	beq.n	8000c44 <_vfiprintf_r+0xc0>
 8000c2c:	465b      	mov	r3, fp
 8000c2e:	4622      	mov	r2, r4
 8000c30:	4629      	mov	r1, r5
 8000c32:	4630      	mov	r0, r6
 8000c34:	f7ff ff93 	bl	8000b5e <__sfputs_r>
 8000c38:	3001      	adds	r0, #1
 8000c3a:	f000 80aa 	beq.w	8000d92 <_vfiprintf_r+0x20e>
 8000c3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c40:	445a      	add	r2, fp
 8000c42:	9209      	str	r2, [sp, #36]	; 0x24
 8000c44:	f89a 3000 	ldrb.w	r3, [sl]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 80a2 	beq.w	8000d92 <_vfiprintf_r+0x20e>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c58:	f10a 0a01 	add.w	sl, sl, #1
 8000c5c:	9304      	str	r3, [sp, #16]
 8000c5e:	9307      	str	r3, [sp, #28]
 8000c60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c64:	931a      	str	r3, [sp, #104]	; 0x68
 8000c66:	4654      	mov	r4, sl
 8000c68:	2205      	movs	r2, #5
 8000c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c6e:	4858      	ldr	r0, [pc, #352]	; (8000dd0 <_vfiprintf_r+0x24c>)
 8000c70:	f000 fd0a 	bl	8001688 <memchr>
 8000c74:	9a04      	ldr	r2, [sp, #16]
 8000c76:	b9d8      	cbnz	r0, 8000cb0 <_vfiprintf_r+0x12c>
 8000c78:	06d1      	lsls	r1, r2, #27
 8000c7a:	bf44      	itt	mi
 8000c7c:	2320      	movmi	r3, #32
 8000c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c82:	0713      	lsls	r3, r2, #28
 8000c84:	bf44      	itt	mi
 8000c86:	232b      	movmi	r3, #43	; 0x2b
 8000c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c90:	2b2a      	cmp	r3, #42	; 0x2a
 8000c92:	d015      	beq.n	8000cc0 <_vfiprintf_r+0x13c>
 8000c94:	4654      	mov	r4, sl
 8000c96:	2000      	movs	r0, #0
 8000c98:	f04f 0c0a 	mov.w	ip, #10
 8000c9c:	9a07      	ldr	r2, [sp, #28]
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ca4:	3b30      	subs	r3, #48	; 0x30
 8000ca6:	2b09      	cmp	r3, #9
 8000ca8:	d94e      	bls.n	8000d48 <_vfiprintf_r+0x1c4>
 8000caa:	b1b0      	cbz	r0, 8000cda <_vfiprintf_r+0x156>
 8000cac:	9207      	str	r2, [sp, #28]
 8000cae:	e014      	b.n	8000cda <_vfiprintf_r+0x156>
 8000cb0:	eba0 0308 	sub.w	r3, r0, r8
 8000cb4:	fa09 f303 	lsl.w	r3, r9, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	46a2      	mov	sl, r4
 8000cbc:	9304      	str	r3, [sp, #16]
 8000cbe:	e7d2      	b.n	8000c66 <_vfiprintf_r+0xe2>
 8000cc0:	9b03      	ldr	r3, [sp, #12]
 8000cc2:	1d19      	adds	r1, r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	9103      	str	r1, [sp, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bfbb      	ittet	lt
 8000ccc:	425b      	neglt	r3, r3
 8000cce:	f042 0202 	orrlt.w	r2, r2, #2
 8000cd2:	9307      	strge	r3, [sp, #28]
 8000cd4:	9307      	strlt	r3, [sp, #28]
 8000cd6:	bfb8      	it	lt
 8000cd8:	9204      	strlt	r2, [sp, #16]
 8000cda:	7823      	ldrb	r3, [r4, #0]
 8000cdc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cde:	d10c      	bne.n	8000cfa <_vfiprintf_r+0x176>
 8000ce0:	7863      	ldrb	r3, [r4, #1]
 8000ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ce4:	d135      	bne.n	8000d52 <_vfiprintf_r+0x1ce>
 8000ce6:	9b03      	ldr	r3, [sp, #12]
 8000ce8:	3402      	adds	r4, #2
 8000cea:	1d1a      	adds	r2, r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	9203      	str	r2, [sp, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bfb8      	it	lt
 8000cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cf8:	9305      	str	r3, [sp, #20]
 8000cfa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000dd4 <_vfiprintf_r+0x250>
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4650      	mov	r0, sl
 8000d02:	7821      	ldrb	r1, [r4, #0]
 8000d04:	f000 fcc0 	bl	8001688 <memchr>
 8000d08:	b140      	cbz	r0, 8000d1c <_vfiprintf_r+0x198>
 8000d0a:	2340      	movs	r3, #64	; 0x40
 8000d0c:	eba0 000a 	sub.w	r0, r0, sl
 8000d10:	fa03 f000 	lsl.w	r0, r3, r0
 8000d14:	9b04      	ldr	r3, [sp, #16]
 8000d16:	3401      	adds	r4, #1
 8000d18:	4303      	orrs	r3, r0
 8000d1a:	9304      	str	r3, [sp, #16]
 8000d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d20:	2206      	movs	r2, #6
 8000d22:	482d      	ldr	r0, [pc, #180]	; (8000dd8 <_vfiprintf_r+0x254>)
 8000d24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d28:	f000 fcae 	bl	8001688 <memchr>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d03f      	beq.n	8000db0 <_vfiprintf_r+0x22c>
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <_vfiprintf_r+0x258>)
 8000d32:	bb1b      	cbnz	r3, 8000d7c <_vfiprintf_r+0x1f8>
 8000d34:	9b03      	ldr	r3, [sp, #12]
 8000d36:	3307      	adds	r3, #7
 8000d38:	f023 0307 	bic.w	r3, r3, #7
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	9303      	str	r3, [sp, #12]
 8000d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d42:	443b      	add	r3, r7
 8000d44:	9309      	str	r3, [sp, #36]	; 0x24
 8000d46:	e767      	b.n	8000c18 <_vfiprintf_r+0x94>
 8000d48:	460c      	mov	r4, r1
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d50:	e7a5      	b.n	8000c9e <_vfiprintf_r+0x11a>
 8000d52:	2300      	movs	r3, #0
 8000d54:	f04f 0c0a 	mov.w	ip, #10
 8000d58:	4619      	mov	r1, r3
 8000d5a:	3401      	adds	r4, #1
 8000d5c:	9305      	str	r3, [sp, #20]
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d64:	3a30      	subs	r2, #48	; 0x30
 8000d66:	2a09      	cmp	r2, #9
 8000d68:	d903      	bls.n	8000d72 <_vfiprintf_r+0x1ee>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0c5      	beq.n	8000cfa <_vfiprintf_r+0x176>
 8000d6e:	9105      	str	r1, [sp, #20]
 8000d70:	e7c3      	b.n	8000cfa <_vfiprintf_r+0x176>
 8000d72:	4604      	mov	r4, r0
 8000d74:	2301      	movs	r3, #1
 8000d76:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d7a:	e7f0      	b.n	8000d5e <_vfiprintf_r+0x1da>
 8000d7c:	ab03      	add	r3, sp, #12
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	462a      	mov	r2, r5
 8000d82:	4630      	mov	r0, r6
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <_vfiprintf_r+0x25c>)
 8000d86:	a904      	add	r1, sp, #16
 8000d88:	f3af 8000 	nop.w
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	1c78      	adds	r0, r7, #1
 8000d90:	d1d6      	bne.n	8000d40 <_vfiprintf_r+0x1bc>
 8000d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d94:	07d9      	lsls	r1, r3, #31
 8000d96:	d405      	bmi.n	8000da4 <_vfiprintf_r+0x220>
 8000d98:	89ab      	ldrh	r3, [r5, #12]
 8000d9a:	059a      	lsls	r2, r3, #22
 8000d9c:	d402      	bmi.n	8000da4 <_vfiprintf_r+0x220>
 8000d9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000da0:	f7ff fde3 	bl	800096a <__retarget_lock_release_recursive>
 8000da4:	89ab      	ldrh	r3, [r5, #12]
 8000da6:	065b      	lsls	r3, r3, #25
 8000da8:	f53f af12 	bmi.w	8000bd0 <_vfiprintf_r+0x4c>
 8000dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dae:	e711      	b.n	8000bd4 <_vfiprintf_r+0x50>
 8000db0:	ab03      	add	r3, sp, #12
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	462a      	mov	r2, r5
 8000db6:	4630      	mov	r0, r6
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <_vfiprintf_r+0x25c>)
 8000dba:	a904      	add	r1, sp, #16
 8000dbc:	f000 f882 	bl	8000ec4 <_printf_i>
 8000dc0:	e7e4      	b.n	8000d8c <_vfiprintf_r+0x208>
 8000dc2:	bf00      	nop
 8000dc4:	080018fc 	.word	0x080018fc
 8000dc8:	0800191c 	.word	0x0800191c
 8000dcc:	080018dc 	.word	0x080018dc
 8000dd0:	0800193c 	.word	0x0800193c
 8000dd4:	08001942 	.word	0x08001942
 8000dd8:	08001946 	.word	0x08001946
 8000ddc:	00000000 	.word	0x00000000
 8000de0:	08000b5f 	.word	0x08000b5f

08000de4 <_printf_common>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	4616      	mov	r6, r2
 8000dea:	4699      	mov	r9, r3
 8000dec:	688a      	ldr	r2, [r1, #8]
 8000dee:	690b      	ldr	r3, [r1, #16]
 8000df0:	4607      	mov	r7, r0
 8000df2:	4293      	cmp	r3, r2
 8000df4:	bfb8      	it	lt
 8000df6:	4613      	movlt	r3, r2
 8000df8:	6033      	str	r3, [r6, #0]
 8000dfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dfe:	460c      	mov	r4, r1
 8000e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e04:	b10a      	cbz	r2, 8000e0a <_printf_common+0x26>
 8000e06:	3301      	adds	r3, #1
 8000e08:	6033      	str	r3, [r6, #0]
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	0699      	lsls	r1, r3, #26
 8000e0e:	bf42      	ittt	mi
 8000e10:	6833      	ldrmi	r3, [r6, #0]
 8000e12:	3302      	addmi	r3, #2
 8000e14:	6033      	strmi	r3, [r6, #0]
 8000e16:	6825      	ldr	r5, [r4, #0]
 8000e18:	f015 0506 	ands.w	r5, r5, #6
 8000e1c:	d106      	bne.n	8000e2c <_printf_common+0x48>
 8000e1e:	f104 0a19 	add.w	sl, r4, #25
 8000e22:	68e3      	ldr	r3, [r4, #12]
 8000e24:	6832      	ldr	r2, [r6, #0]
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	dc28      	bgt.n	8000e7e <_printf_common+0x9a>
 8000e2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e30:	1e13      	subs	r3, r2, #0
 8000e32:	6822      	ldr	r2, [r4, #0]
 8000e34:	bf18      	it	ne
 8000e36:	2301      	movne	r3, #1
 8000e38:	0692      	lsls	r2, r2, #26
 8000e3a:	d42d      	bmi.n	8000e98 <_printf_common+0xb4>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4638      	mov	r0, r7
 8000e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e44:	47c0      	blx	r8
 8000e46:	3001      	adds	r0, #1
 8000e48:	d020      	beq.n	8000e8c <_printf_common+0xa8>
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	68e5      	ldr	r5, [r4, #12]
 8000e4e:	f003 0306 	and.w	r3, r3, #6
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf18      	it	ne
 8000e56:	2500      	movne	r5, #0
 8000e58:	6832      	ldr	r2, [r6, #0]
 8000e5a:	f04f 0600 	mov.w	r6, #0
 8000e5e:	68a3      	ldr	r3, [r4, #8]
 8000e60:	bf08      	it	eq
 8000e62:	1aad      	subeq	r5, r5, r2
 8000e64:	6922      	ldr	r2, [r4, #16]
 8000e66:	bf08      	it	eq
 8000e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	bfc4      	itt	gt
 8000e70:	1a9b      	subgt	r3, r3, r2
 8000e72:	18ed      	addgt	r5, r5, r3
 8000e74:	341a      	adds	r4, #26
 8000e76:	42b5      	cmp	r5, r6
 8000e78:	d11a      	bne.n	8000eb0 <_printf_common+0xcc>
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	e008      	b.n	8000e90 <_printf_common+0xac>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	4652      	mov	r2, sl
 8000e82:	4649      	mov	r1, r9
 8000e84:	4638      	mov	r0, r7
 8000e86:	47c0      	blx	r8
 8000e88:	3001      	adds	r0, #1
 8000e8a:	d103      	bne.n	8000e94 <_printf_common+0xb0>
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e94:	3501      	adds	r5, #1
 8000e96:	e7c4      	b.n	8000e22 <_printf_common+0x3e>
 8000e98:	2030      	movs	r0, #48	; 0x30
 8000e9a:	18e1      	adds	r1, r4, r3
 8000e9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ea6:	4422      	add	r2, r4
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000eae:	e7c5      	b.n	8000e3c <_printf_common+0x58>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	4638      	mov	r0, r7
 8000eb8:	47c0      	blx	r8
 8000eba:	3001      	adds	r0, #1
 8000ebc:	d0e6      	beq.n	8000e8c <_printf_common+0xa8>
 8000ebe:	3601      	adds	r6, #1
 8000ec0:	e7d9      	b.n	8000e76 <_printf_common+0x92>
	...

08000ec4 <_printf_i>:
 8000ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec8:	7e0f      	ldrb	r7, [r1, #24]
 8000eca:	4691      	mov	r9, r2
 8000ecc:	2f78      	cmp	r7, #120	; 0x78
 8000ece:	4680      	mov	r8, r0
 8000ed0:	460c      	mov	r4, r1
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000eda:	d807      	bhi.n	8000eec <_printf_i+0x28>
 8000edc:	2f62      	cmp	r7, #98	; 0x62
 8000ede:	d80a      	bhi.n	8000ef6 <_printf_i+0x32>
 8000ee0:	2f00      	cmp	r7, #0
 8000ee2:	f000 80d9 	beq.w	8001098 <_printf_i+0x1d4>
 8000ee6:	2f58      	cmp	r7, #88	; 0x58
 8000ee8:	f000 80a4 	beq.w	8001034 <_printf_i+0x170>
 8000eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ef4:	e03a      	b.n	8000f6c <_printf_i+0xa8>
 8000ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000efa:	2b15      	cmp	r3, #21
 8000efc:	d8f6      	bhi.n	8000eec <_printf_i+0x28>
 8000efe:	a101      	add	r1, pc, #4	; (adr r1, 8000f04 <_printf_i+0x40>)
 8000f00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f04:	08000f5d 	.word	0x08000f5d
 8000f08:	08000f71 	.word	0x08000f71
 8000f0c:	08000eed 	.word	0x08000eed
 8000f10:	08000eed 	.word	0x08000eed
 8000f14:	08000eed 	.word	0x08000eed
 8000f18:	08000eed 	.word	0x08000eed
 8000f1c:	08000f71 	.word	0x08000f71
 8000f20:	08000eed 	.word	0x08000eed
 8000f24:	08000eed 	.word	0x08000eed
 8000f28:	08000eed 	.word	0x08000eed
 8000f2c:	08000eed 	.word	0x08000eed
 8000f30:	0800107f 	.word	0x0800107f
 8000f34:	08000fa1 	.word	0x08000fa1
 8000f38:	08001061 	.word	0x08001061
 8000f3c:	08000eed 	.word	0x08000eed
 8000f40:	08000eed 	.word	0x08000eed
 8000f44:	080010a1 	.word	0x080010a1
 8000f48:	08000eed 	.word	0x08000eed
 8000f4c:	08000fa1 	.word	0x08000fa1
 8000f50:	08000eed 	.word	0x08000eed
 8000f54:	08000eed 	.word	0x08000eed
 8000f58:	08001069 	.word	0x08001069
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	1d1a      	adds	r2, r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	602a      	str	r2, [r5, #0]
 8000f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e0a4      	b.n	80010ba <_printf_i+0x1f6>
 8000f70:	6820      	ldr	r0, [r4, #0]
 8000f72:	6829      	ldr	r1, [r5, #0]
 8000f74:	0606      	lsls	r6, r0, #24
 8000f76:	f101 0304 	add.w	r3, r1, #4
 8000f7a:	d50a      	bpl.n	8000f92 <_printf_i+0xce>
 8000f7c:	680e      	ldr	r6, [r1, #0]
 8000f7e:	602b      	str	r3, [r5, #0]
 8000f80:	2e00      	cmp	r6, #0
 8000f82:	da03      	bge.n	8000f8c <_printf_i+0xc8>
 8000f84:	232d      	movs	r3, #45	; 0x2d
 8000f86:	4276      	negs	r6, r6
 8000f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	485e      	ldr	r0, [pc, #376]	; (8001108 <_printf_i+0x244>)
 8000f90:	e019      	b.n	8000fc6 <_printf_i+0x102>
 8000f92:	680e      	ldr	r6, [r1, #0]
 8000f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	bf18      	it	ne
 8000f9c:	b236      	sxthne	r6, r6
 8000f9e:	e7ef      	b.n	8000f80 <_printf_i+0xbc>
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	6820      	ldr	r0, [r4, #0]
 8000fa4:	1d19      	adds	r1, r3, #4
 8000fa6:	6029      	str	r1, [r5, #0]
 8000fa8:	0601      	lsls	r1, r0, #24
 8000faa:	d501      	bpl.n	8000fb0 <_printf_i+0xec>
 8000fac:	681e      	ldr	r6, [r3, #0]
 8000fae:	e002      	b.n	8000fb6 <_printf_i+0xf2>
 8000fb0:	0646      	lsls	r6, r0, #25
 8000fb2:	d5fb      	bpl.n	8000fac <_printf_i+0xe8>
 8000fb4:	881e      	ldrh	r6, [r3, #0]
 8000fb6:	2f6f      	cmp	r7, #111	; 0x6f
 8000fb8:	bf0c      	ite	eq
 8000fba:	2308      	moveq	r3, #8
 8000fbc:	230a      	movne	r3, #10
 8000fbe:	4852      	ldr	r0, [pc, #328]	; (8001108 <_printf_i+0x244>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fc6:	6865      	ldr	r5, [r4, #4]
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	bfa8      	it	ge
 8000fcc:	6821      	ldrge	r1, [r4, #0]
 8000fce:	60a5      	str	r5, [r4, #8]
 8000fd0:	bfa4      	itt	ge
 8000fd2:	f021 0104 	bicge.w	r1, r1, #4
 8000fd6:	6021      	strge	r1, [r4, #0]
 8000fd8:	b90e      	cbnz	r6, 8000fde <_printf_i+0x11a>
 8000fda:	2d00      	cmp	r5, #0
 8000fdc:	d04d      	beq.n	800107a <_printf_i+0x1b6>
 8000fde:	4615      	mov	r5, r2
 8000fe0:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fe4:	fb03 6711 	mls	r7, r3, r1, r6
 8000fe8:	5dc7      	ldrb	r7, [r0, r7]
 8000fea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fee:	4637      	mov	r7, r6
 8000ff0:	42bb      	cmp	r3, r7
 8000ff2:	460e      	mov	r6, r1
 8000ff4:	d9f4      	bls.n	8000fe0 <_printf_i+0x11c>
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d10b      	bne.n	8001012 <_printf_i+0x14e>
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	07de      	lsls	r6, r3, #31
 8000ffe:	d508      	bpl.n	8001012 <_printf_i+0x14e>
 8001000:	6923      	ldr	r3, [r4, #16]
 8001002:	6861      	ldr	r1, [r4, #4]
 8001004:	4299      	cmp	r1, r3
 8001006:	bfde      	ittt	le
 8001008:	2330      	movle	r3, #48	; 0x30
 800100a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800100e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001012:	1b52      	subs	r2, r2, r5
 8001014:	6122      	str	r2, [r4, #16]
 8001016:	464b      	mov	r3, r9
 8001018:	4621      	mov	r1, r4
 800101a:	4640      	mov	r0, r8
 800101c:	f8cd a000 	str.w	sl, [sp]
 8001020:	aa03      	add	r2, sp, #12
 8001022:	f7ff fedf 	bl	8000de4 <_printf_common>
 8001026:	3001      	adds	r0, #1
 8001028:	d14c      	bne.n	80010c4 <_printf_i+0x200>
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	b004      	add	sp, #16
 8001030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001034:	4834      	ldr	r0, [pc, #208]	; (8001108 <_printf_i+0x244>)
 8001036:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800103a:	6829      	ldr	r1, [r5, #0]
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001042:	6029      	str	r1, [r5, #0]
 8001044:	061d      	lsls	r5, r3, #24
 8001046:	d514      	bpl.n	8001072 <_printf_i+0x1ae>
 8001048:	07df      	lsls	r7, r3, #31
 800104a:	bf44      	itt	mi
 800104c:	f043 0320 	orrmi.w	r3, r3, #32
 8001050:	6023      	strmi	r3, [r4, #0]
 8001052:	b91e      	cbnz	r6, 800105c <_printf_i+0x198>
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	f023 0320 	bic.w	r3, r3, #32
 800105a:	6023      	str	r3, [r4, #0]
 800105c:	2310      	movs	r3, #16
 800105e:	e7af      	b.n	8000fc0 <_printf_i+0xfc>
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6023      	str	r3, [r4, #0]
 8001068:	2378      	movs	r3, #120	; 0x78
 800106a:	4828      	ldr	r0, [pc, #160]	; (800110c <_printf_i+0x248>)
 800106c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001070:	e7e3      	b.n	800103a <_printf_i+0x176>
 8001072:	0659      	lsls	r1, r3, #25
 8001074:	bf48      	it	mi
 8001076:	b2b6      	uxthmi	r6, r6
 8001078:	e7e6      	b.n	8001048 <_printf_i+0x184>
 800107a:	4615      	mov	r5, r2
 800107c:	e7bb      	b.n	8000ff6 <_printf_i+0x132>
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	6826      	ldr	r6, [r4, #0]
 8001082:	1d18      	adds	r0, r3, #4
 8001084:	6961      	ldr	r1, [r4, #20]
 8001086:	6028      	str	r0, [r5, #0]
 8001088:	0635      	lsls	r5, r6, #24
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	d501      	bpl.n	8001092 <_printf_i+0x1ce>
 800108e:	6019      	str	r1, [r3, #0]
 8001090:	e002      	b.n	8001098 <_printf_i+0x1d4>
 8001092:	0670      	lsls	r0, r6, #25
 8001094:	d5fb      	bpl.n	800108e <_printf_i+0x1ca>
 8001096:	8019      	strh	r1, [r3, #0]
 8001098:	2300      	movs	r3, #0
 800109a:	4615      	mov	r5, r2
 800109c:	6123      	str	r3, [r4, #16]
 800109e:	e7ba      	b.n	8001016 <_printf_i+0x152>
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	2100      	movs	r1, #0
 80010a4:	1d1a      	adds	r2, r3, #4
 80010a6:	602a      	str	r2, [r5, #0]
 80010a8:	681d      	ldr	r5, [r3, #0]
 80010aa:	6862      	ldr	r2, [r4, #4]
 80010ac:	4628      	mov	r0, r5
 80010ae:	f000 faeb 	bl	8001688 <memchr>
 80010b2:	b108      	cbz	r0, 80010b8 <_printf_i+0x1f4>
 80010b4:	1b40      	subs	r0, r0, r5
 80010b6:	6060      	str	r0, [r4, #4]
 80010b8:	6863      	ldr	r3, [r4, #4]
 80010ba:	6123      	str	r3, [r4, #16]
 80010bc:	2300      	movs	r3, #0
 80010be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010c2:	e7a8      	b.n	8001016 <_printf_i+0x152>
 80010c4:	462a      	mov	r2, r5
 80010c6:	4649      	mov	r1, r9
 80010c8:	4640      	mov	r0, r8
 80010ca:	6923      	ldr	r3, [r4, #16]
 80010cc:	47d0      	blx	sl
 80010ce:	3001      	adds	r0, #1
 80010d0:	d0ab      	beq.n	800102a <_printf_i+0x166>
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	079b      	lsls	r3, r3, #30
 80010d6:	d413      	bmi.n	8001100 <_printf_i+0x23c>
 80010d8:	68e0      	ldr	r0, [r4, #12]
 80010da:	9b03      	ldr	r3, [sp, #12]
 80010dc:	4298      	cmp	r0, r3
 80010de:	bfb8      	it	lt
 80010e0:	4618      	movlt	r0, r3
 80010e2:	e7a4      	b.n	800102e <_printf_i+0x16a>
 80010e4:	2301      	movs	r3, #1
 80010e6:	4632      	mov	r2, r6
 80010e8:	4649      	mov	r1, r9
 80010ea:	4640      	mov	r0, r8
 80010ec:	47d0      	blx	sl
 80010ee:	3001      	adds	r0, #1
 80010f0:	d09b      	beq.n	800102a <_printf_i+0x166>
 80010f2:	3501      	adds	r5, #1
 80010f4:	68e3      	ldr	r3, [r4, #12]
 80010f6:	9903      	ldr	r1, [sp, #12]
 80010f8:	1a5b      	subs	r3, r3, r1
 80010fa:	42ab      	cmp	r3, r5
 80010fc:	dcf2      	bgt.n	80010e4 <_printf_i+0x220>
 80010fe:	e7eb      	b.n	80010d8 <_printf_i+0x214>
 8001100:	2500      	movs	r5, #0
 8001102:	f104 0619 	add.w	r6, r4, #25
 8001106:	e7f5      	b.n	80010f4 <_printf_i+0x230>
 8001108:	0800194d 	.word	0x0800194d
 800110c:	0800195e 	.word	0x0800195e

08001110 <_putc_r>:
 8001110:	b570      	push	{r4, r5, r6, lr}
 8001112:	460d      	mov	r5, r1
 8001114:	4614      	mov	r4, r2
 8001116:	4606      	mov	r6, r0
 8001118:	b118      	cbz	r0, 8001122 <_putc_r+0x12>
 800111a:	6983      	ldr	r3, [r0, #24]
 800111c:	b90b      	cbnz	r3, 8001122 <_putc_r+0x12>
 800111e:	f7ff fb73 	bl	8000808 <__sinit>
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <_putc_r+0x84>)
 8001124:	429c      	cmp	r4, r3
 8001126:	d124      	bne.n	8001172 <_putc_r+0x62>
 8001128:	6874      	ldr	r4, [r6, #4]
 800112a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800112c:	07d8      	lsls	r0, r3, #31
 800112e:	d405      	bmi.n	800113c <_putc_r+0x2c>
 8001130:	89a3      	ldrh	r3, [r4, #12]
 8001132:	0599      	lsls	r1, r3, #22
 8001134:	d402      	bmi.n	800113c <_putc_r+0x2c>
 8001136:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001138:	f7ff fc16 	bl	8000968 <__retarget_lock_acquire_recursive>
 800113c:	68a3      	ldr	r3, [r4, #8]
 800113e:	3b01      	subs	r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	60a3      	str	r3, [r4, #8]
 8001144:	da05      	bge.n	8001152 <_putc_r+0x42>
 8001146:	69a2      	ldr	r2, [r4, #24]
 8001148:	4293      	cmp	r3, r2
 800114a:	db1c      	blt.n	8001186 <_putc_r+0x76>
 800114c:	b2eb      	uxtb	r3, r5
 800114e:	2b0a      	cmp	r3, #10
 8001150:	d019      	beq.n	8001186 <_putc_r+0x76>
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	6022      	str	r2, [r4, #0]
 8001158:	701d      	strb	r5, [r3, #0]
 800115a:	b2ed      	uxtb	r5, r5
 800115c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800115e:	07da      	lsls	r2, r3, #31
 8001160:	d405      	bmi.n	800116e <_putc_r+0x5e>
 8001162:	89a3      	ldrh	r3, [r4, #12]
 8001164:	059b      	lsls	r3, r3, #22
 8001166:	d402      	bmi.n	800116e <_putc_r+0x5e>
 8001168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800116a:	f7ff fbfe 	bl	800096a <__retarget_lock_release_recursive>
 800116e:	4628      	mov	r0, r5
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <_putc_r+0x88>)
 8001174:	429c      	cmp	r4, r3
 8001176:	d101      	bne.n	800117c <_putc_r+0x6c>
 8001178:	68b4      	ldr	r4, [r6, #8]
 800117a:	e7d6      	b.n	800112a <_putc_r+0x1a>
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <_putc_r+0x8c>)
 800117e:	429c      	cmp	r4, r3
 8001180:	bf08      	it	eq
 8001182:	68f4      	ldreq	r4, [r6, #12]
 8001184:	e7d1      	b.n	800112a <_putc_r+0x1a>
 8001186:	4629      	mov	r1, r5
 8001188:	4622      	mov	r2, r4
 800118a:	4630      	mov	r0, r6
 800118c:	f000 f85c 	bl	8001248 <__swbuf_r>
 8001190:	4605      	mov	r5, r0
 8001192:	e7e3      	b.n	800115c <_putc_r+0x4c>
 8001194:	080018fc 	.word	0x080018fc
 8001198:	0800191c 	.word	0x0800191c
 800119c:	080018dc 	.word	0x080018dc

080011a0 <_sbrk_r>:
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	2300      	movs	r3, #0
 80011a4:	4d05      	ldr	r5, [pc, #20]	; (80011bc <_sbrk_r+0x1c>)
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	602b      	str	r3, [r5, #0]
 80011ac:	f7ff f9ba 	bl	8000524 <_sbrk>
 80011b0:	1c43      	adds	r3, r0, #1
 80011b2:	d102      	bne.n	80011ba <_sbrk_r+0x1a>
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	b103      	cbz	r3, 80011ba <_sbrk_r+0x1a>
 80011b8:	6023      	str	r3, [r4, #0]
 80011ba:	bd38      	pop	{r3, r4, r5, pc}
 80011bc:	200000d8 	.word	0x200000d8

080011c0 <__sread>:
 80011c0:	b510      	push	{r4, lr}
 80011c2:	460c      	mov	r4, r1
 80011c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011c8:	f000 fa78 	bl	80016bc <_read_r>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	bfab      	itete	ge
 80011d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80011d2:	89a3      	ldrhlt	r3, [r4, #12]
 80011d4:	181b      	addge	r3, r3, r0
 80011d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80011da:	bfac      	ite	ge
 80011dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80011de:	81a3      	strhlt	r3, [r4, #12]
 80011e0:	bd10      	pop	{r4, pc}

080011e2 <__swrite>:
 80011e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e6:	461f      	mov	r7, r3
 80011e8:	898b      	ldrh	r3, [r1, #12]
 80011ea:	4605      	mov	r5, r0
 80011ec:	05db      	lsls	r3, r3, #23
 80011ee:	460c      	mov	r4, r1
 80011f0:	4616      	mov	r6, r2
 80011f2:	d505      	bpl.n	8001200 <__swrite+0x1e>
 80011f4:	2302      	movs	r3, #2
 80011f6:	2200      	movs	r2, #0
 80011f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011fc:	f000 f9cc 	bl	8001598 <_lseek_r>
 8001200:	89a3      	ldrh	r3, [r4, #12]
 8001202:	4632      	mov	r2, r6
 8001204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001208:	81a3      	strh	r3, [r4, #12]
 800120a:	4628      	mov	r0, r5
 800120c:	463b      	mov	r3, r7
 800120e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001216:	f000 b869 	b.w	80012ec <_write_r>

0800121a <__sseek>:
 800121a:	b510      	push	{r4, lr}
 800121c:	460c      	mov	r4, r1
 800121e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001222:	f000 f9b9 	bl	8001598 <_lseek_r>
 8001226:	1c43      	adds	r3, r0, #1
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	bf15      	itete	ne
 800122c:	6560      	strne	r0, [r4, #84]	; 0x54
 800122e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001236:	81a3      	strheq	r3, [r4, #12]
 8001238:	bf18      	it	ne
 800123a:	81a3      	strhne	r3, [r4, #12]
 800123c:	bd10      	pop	{r4, pc}

0800123e <__sclose>:
 800123e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001242:	f000 b8db 	b.w	80013fc <_close_r>
	...

08001248 <__swbuf_r>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	460e      	mov	r6, r1
 800124c:	4614      	mov	r4, r2
 800124e:	4605      	mov	r5, r0
 8001250:	b118      	cbz	r0, 800125a <__swbuf_r+0x12>
 8001252:	6983      	ldr	r3, [r0, #24]
 8001254:	b90b      	cbnz	r3, 800125a <__swbuf_r+0x12>
 8001256:	f7ff fad7 	bl	8000808 <__sinit>
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <__swbuf_r+0x98>)
 800125c:	429c      	cmp	r4, r3
 800125e:	d12b      	bne.n	80012b8 <__swbuf_r+0x70>
 8001260:	686c      	ldr	r4, [r5, #4]
 8001262:	69a3      	ldr	r3, [r4, #24]
 8001264:	60a3      	str	r3, [r4, #8]
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	071a      	lsls	r2, r3, #28
 800126a:	d52f      	bpl.n	80012cc <__swbuf_r+0x84>
 800126c:	6923      	ldr	r3, [r4, #16]
 800126e:	b36b      	cbz	r3, 80012cc <__swbuf_r+0x84>
 8001270:	6923      	ldr	r3, [r4, #16]
 8001272:	6820      	ldr	r0, [r4, #0]
 8001274:	b2f6      	uxtb	r6, r6
 8001276:	1ac0      	subs	r0, r0, r3
 8001278:	6963      	ldr	r3, [r4, #20]
 800127a:	4637      	mov	r7, r6
 800127c:	4283      	cmp	r3, r0
 800127e:	dc04      	bgt.n	800128a <__swbuf_r+0x42>
 8001280:	4621      	mov	r1, r4
 8001282:	4628      	mov	r0, r5
 8001284:	f000 f94c 	bl	8001520 <_fflush_r>
 8001288:	bb30      	cbnz	r0, 80012d8 <__swbuf_r+0x90>
 800128a:	68a3      	ldr	r3, [r4, #8]
 800128c:	3001      	adds	r0, #1
 800128e:	3b01      	subs	r3, #1
 8001290:	60a3      	str	r3, [r4, #8]
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	6022      	str	r2, [r4, #0]
 8001298:	701e      	strb	r6, [r3, #0]
 800129a:	6963      	ldr	r3, [r4, #20]
 800129c:	4283      	cmp	r3, r0
 800129e:	d004      	beq.n	80012aa <__swbuf_r+0x62>
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	07db      	lsls	r3, r3, #31
 80012a4:	d506      	bpl.n	80012b4 <__swbuf_r+0x6c>
 80012a6:	2e0a      	cmp	r6, #10
 80012a8:	d104      	bne.n	80012b4 <__swbuf_r+0x6c>
 80012aa:	4621      	mov	r1, r4
 80012ac:	4628      	mov	r0, r5
 80012ae:	f000 f937 	bl	8001520 <_fflush_r>
 80012b2:	b988      	cbnz	r0, 80012d8 <__swbuf_r+0x90>
 80012b4:	4638      	mov	r0, r7
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <__swbuf_r+0x9c>)
 80012ba:	429c      	cmp	r4, r3
 80012bc:	d101      	bne.n	80012c2 <__swbuf_r+0x7a>
 80012be:	68ac      	ldr	r4, [r5, #8]
 80012c0:	e7cf      	b.n	8001262 <__swbuf_r+0x1a>
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <__swbuf_r+0xa0>)
 80012c4:	429c      	cmp	r4, r3
 80012c6:	bf08      	it	eq
 80012c8:	68ec      	ldreq	r4, [r5, #12]
 80012ca:	e7ca      	b.n	8001262 <__swbuf_r+0x1a>
 80012cc:	4621      	mov	r1, r4
 80012ce:	4628      	mov	r0, r5
 80012d0:	f000 f81e 	bl	8001310 <__swsetup_r>
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d0cb      	beq.n	8001270 <__swbuf_r+0x28>
 80012d8:	f04f 37ff 	mov.w	r7, #4294967295
 80012dc:	e7ea      	b.n	80012b4 <__swbuf_r+0x6c>
 80012de:	bf00      	nop
 80012e0:	080018fc 	.word	0x080018fc
 80012e4:	0800191c 	.word	0x0800191c
 80012e8:	080018dc 	.word	0x080018dc

080012ec <_write_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	2200      	movs	r2, #0
 80012f6:	4d05      	ldr	r5, [pc, #20]	; (800130c <_write_r+0x20>)
 80012f8:	602a      	str	r2, [r5, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	f7ff f8c6 	bl	800048c <_write>
 8001300:	1c43      	adds	r3, r0, #1
 8001302:	d102      	bne.n	800130a <_write_r+0x1e>
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	b103      	cbz	r3, 800130a <_write_r+0x1e>
 8001308:	6023      	str	r3, [r4, #0]
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 800130c:	200000d8 	.word	0x200000d8

08001310 <__swsetup_r>:
 8001310:	4b32      	ldr	r3, [pc, #200]	; (80013dc <__swsetup_r+0xcc>)
 8001312:	b570      	push	{r4, r5, r6, lr}
 8001314:	681d      	ldr	r5, [r3, #0]
 8001316:	4606      	mov	r6, r0
 8001318:	460c      	mov	r4, r1
 800131a:	b125      	cbz	r5, 8001326 <__swsetup_r+0x16>
 800131c:	69ab      	ldr	r3, [r5, #24]
 800131e:	b913      	cbnz	r3, 8001326 <__swsetup_r+0x16>
 8001320:	4628      	mov	r0, r5
 8001322:	f7ff fa71 	bl	8000808 <__sinit>
 8001326:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <__swsetup_r+0xd0>)
 8001328:	429c      	cmp	r4, r3
 800132a:	d10f      	bne.n	800134c <__swsetup_r+0x3c>
 800132c:	686c      	ldr	r4, [r5, #4]
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001334:	0719      	lsls	r1, r3, #28
 8001336:	d42c      	bmi.n	8001392 <__swsetup_r+0x82>
 8001338:	06dd      	lsls	r5, r3, #27
 800133a:	d411      	bmi.n	8001360 <__swsetup_r+0x50>
 800133c:	2309      	movs	r3, #9
 800133e:	6033      	str	r3, [r6, #0]
 8001340:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	81a3      	strh	r3, [r4, #12]
 800134a:	e03e      	b.n	80013ca <__swsetup_r+0xba>
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <__swsetup_r+0xd4>)
 800134e:	429c      	cmp	r4, r3
 8001350:	d101      	bne.n	8001356 <__swsetup_r+0x46>
 8001352:	68ac      	ldr	r4, [r5, #8]
 8001354:	e7eb      	b.n	800132e <__swsetup_r+0x1e>
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <__swsetup_r+0xd8>)
 8001358:	429c      	cmp	r4, r3
 800135a:	bf08      	it	eq
 800135c:	68ec      	ldreq	r4, [r5, #12]
 800135e:	e7e6      	b.n	800132e <__swsetup_r+0x1e>
 8001360:	0758      	lsls	r0, r3, #29
 8001362:	d512      	bpl.n	800138a <__swsetup_r+0x7a>
 8001364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001366:	b141      	cbz	r1, 800137a <__swsetup_r+0x6a>
 8001368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800136c:	4299      	cmp	r1, r3
 800136e:	d002      	beq.n	8001376 <__swsetup_r+0x66>
 8001370:	4630      	mov	r0, r6
 8001372:	f7ff fb03 	bl	800097c <_free_r>
 8001376:	2300      	movs	r3, #0
 8001378:	6363      	str	r3, [r4, #52]	; 0x34
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001380:	81a3      	strh	r3, [r4, #12]
 8001382:	2300      	movs	r3, #0
 8001384:	6063      	str	r3, [r4, #4]
 8001386:	6923      	ldr	r3, [r4, #16]
 8001388:	6023      	str	r3, [r4, #0]
 800138a:	89a3      	ldrh	r3, [r4, #12]
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	81a3      	strh	r3, [r4, #12]
 8001392:	6923      	ldr	r3, [r4, #16]
 8001394:	b94b      	cbnz	r3, 80013aa <__swsetup_r+0x9a>
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800139c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a0:	d003      	beq.n	80013aa <__swsetup_r+0x9a>
 80013a2:	4621      	mov	r1, r4
 80013a4:	4630      	mov	r0, r6
 80013a6:	f000 f92f 	bl	8001608 <__smakebuf_r>
 80013aa:	89a0      	ldrh	r0, [r4, #12]
 80013ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013b0:	f010 0301 	ands.w	r3, r0, #1
 80013b4:	d00a      	beq.n	80013cc <__swsetup_r+0xbc>
 80013b6:	2300      	movs	r3, #0
 80013b8:	60a3      	str	r3, [r4, #8]
 80013ba:	6963      	ldr	r3, [r4, #20]
 80013bc:	425b      	negs	r3, r3
 80013be:	61a3      	str	r3, [r4, #24]
 80013c0:	6923      	ldr	r3, [r4, #16]
 80013c2:	b943      	cbnz	r3, 80013d6 <__swsetup_r+0xc6>
 80013c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013c8:	d1ba      	bne.n	8001340 <__swsetup_r+0x30>
 80013ca:	bd70      	pop	{r4, r5, r6, pc}
 80013cc:	0781      	lsls	r1, r0, #30
 80013ce:	bf58      	it	pl
 80013d0:	6963      	ldrpl	r3, [r4, #20]
 80013d2:	60a3      	str	r3, [r4, #8]
 80013d4:	e7f4      	b.n	80013c0 <__swsetup_r+0xb0>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e7f7      	b.n	80013ca <__swsetup_r+0xba>
 80013da:	bf00      	nop
 80013dc:	20000044 	.word	0x20000044
 80013e0:	080018fc 	.word	0x080018fc
 80013e4:	0800191c 	.word	0x0800191c
 80013e8:	080018dc 	.word	0x080018dc

080013ec <abort>:
 80013ec:	2006      	movs	r0, #6
 80013ee:	b508      	push	{r3, lr}
 80013f0:	f000 f99e 	bl	8001730 <raise>
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff f822 	bl	800043e <_exit>
	...

080013fc <_close_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	2300      	movs	r3, #0
 8001400:	4d05      	ldr	r5, [pc, #20]	; (8001418 <_close_r+0x1c>)
 8001402:	4604      	mov	r4, r0
 8001404:	4608      	mov	r0, r1
 8001406:	602b      	str	r3, [r5, #0]
 8001408:	f7ff f85c 	bl	80004c4 <_close>
 800140c:	1c43      	adds	r3, r0, #1
 800140e:	d102      	bne.n	8001416 <_close_r+0x1a>
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	b103      	cbz	r3, 8001416 <_close_r+0x1a>
 8001414:	6023      	str	r3, [r4, #0]
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	200000d8 	.word	0x200000d8

0800141c <__sflush_r>:
 800141c:	898a      	ldrh	r2, [r1, #12]
 800141e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001420:	4605      	mov	r5, r0
 8001422:	0710      	lsls	r0, r2, #28
 8001424:	460c      	mov	r4, r1
 8001426:	d457      	bmi.n	80014d8 <__sflush_r+0xbc>
 8001428:	684b      	ldr	r3, [r1, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	dc04      	bgt.n	8001438 <__sflush_r+0x1c>
 800142e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001430:	2b00      	cmp	r3, #0
 8001432:	dc01      	bgt.n	8001438 <__sflush_r+0x1c>
 8001434:	2000      	movs	r0, #0
 8001436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800143a:	2e00      	cmp	r6, #0
 800143c:	d0fa      	beq.n	8001434 <__sflush_r+0x18>
 800143e:	2300      	movs	r3, #0
 8001440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001444:	682f      	ldr	r7, [r5, #0]
 8001446:	602b      	str	r3, [r5, #0]
 8001448:	d032      	beq.n	80014b0 <__sflush_r+0x94>
 800144a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	075a      	lsls	r2, r3, #29
 8001450:	d505      	bpl.n	800145e <__sflush_r+0x42>
 8001452:	6863      	ldr	r3, [r4, #4]
 8001454:	1ac0      	subs	r0, r0, r3
 8001456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001458:	b10b      	cbz	r3, 800145e <__sflush_r+0x42>
 800145a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800145c:	1ac0      	subs	r0, r0, r3
 800145e:	2300      	movs	r3, #0
 8001460:	4602      	mov	r2, r0
 8001462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001464:	4628      	mov	r0, r5
 8001466:	6a21      	ldr	r1, [r4, #32]
 8001468:	47b0      	blx	r6
 800146a:	1c43      	adds	r3, r0, #1
 800146c:	89a3      	ldrh	r3, [r4, #12]
 800146e:	d106      	bne.n	800147e <__sflush_r+0x62>
 8001470:	6829      	ldr	r1, [r5, #0]
 8001472:	291d      	cmp	r1, #29
 8001474:	d82c      	bhi.n	80014d0 <__sflush_r+0xb4>
 8001476:	4a29      	ldr	r2, [pc, #164]	; (800151c <__sflush_r+0x100>)
 8001478:	40ca      	lsrs	r2, r1
 800147a:	07d6      	lsls	r6, r2, #31
 800147c:	d528      	bpl.n	80014d0 <__sflush_r+0xb4>
 800147e:	2200      	movs	r2, #0
 8001480:	6062      	str	r2, [r4, #4]
 8001482:	6922      	ldr	r2, [r4, #16]
 8001484:	04d9      	lsls	r1, r3, #19
 8001486:	6022      	str	r2, [r4, #0]
 8001488:	d504      	bpl.n	8001494 <__sflush_r+0x78>
 800148a:	1c42      	adds	r2, r0, #1
 800148c:	d101      	bne.n	8001492 <__sflush_r+0x76>
 800148e:	682b      	ldr	r3, [r5, #0]
 8001490:	b903      	cbnz	r3, 8001494 <__sflush_r+0x78>
 8001492:	6560      	str	r0, [r4, #84]	; 0x54
 8001494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001496:	602f      	str	r7, [r5, #0]
 8001498:	2900      	cmp	r1, #0
 800149a:	d0cb      	beq.n	8001434 <__sflush_r+0x18>
 800149c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014a0:	4299      	cmp	r1, r3
 80014a2:	d002      	beq.n	80014aa <__sflush_r+0x8e>
 80014a4:	4628      	mov	r0, r5
 80014a6:	f7ff fa69 	bl	800097c <_free_r>
 80014aa:	2000      	movs	r0, #0
 80014ac:	6360      	str	r0, [r4, #52]	; 0x34
 80014ae:	e7c2      	b.n	8001436 <__sflush_r+0x1a>
 80014b0:	6a21      	ldr	r1, [r4, #32]
 80014b2:	2301      	movs	r3, #1
 80014b4:	4628      	mov	r0, r5
 80014b6:	47b0      	blx	r6
 80014b8:	1c41      	adds	r1, r0, #1
 80014ba:	d1c7      	bne.n	800144c <__sflush_r+0x30>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0c4      	beq.n	800144c <__sflush_r+0x30>
 80014c2:	2b1d      	cmp	r3, #29
 80014c4:	d001      	beq.n	80014ca <__sflush_r+0xae>
 80014c6:	2b16      	cmp	r3, #22
 80014c8:	d101      	bne.n	80014ce <__sflush_r+0xb2>
 80014ca:	602f      	str	r7, [r5, #0]
 80014cc:	e7b2      	b.n	8001434 <__sflush_r+0x18>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	e7ae      	b.n	8001436 <__sflush_r+0x1a>
 80014d8:	690f      	ldr	r7, [r1, #16]
 80014da:	2f00      	cmp	r7, #0
 80014dc:	d0aa      	beq.n	8001434 <__sflush_r+0x18>
 80014de:	0793      	lsls	r3, r2, #30
 80014e0:	bf18      	it	ne
 80014e2:	2300      	movne	r3, #0
 80014e4:	680e      	ldr	r6, [r1, #0]
 80014e6:	bf08      	it	eq
 80014e8:	694b      	ldreq	r3, [r1, #20]
 80014ea:	1bf6      	subs	r6, r6, r7
 80014ec:	600f      	str	r7, [r1, #0]
 80014ee:	608b      	str	r3, [r1, #8]
 80014f0:	2e00      	cmp	r6, #0
 80014f2:	dd9f      	ble.n	8001434 <__sflush_r+0x18>
 80014f4:	4633      	mov	r3, r6
 80014f6:	463a      	mov	r2, r7
 80014f8:	4628      	mov	r0, r5
 80014fa:	6a21      	ldr	r1, [r4, #32]
 80014fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001500:	47e0      	blx	ip
 8001502:	2800      	cmp	r0, #0
 8001504:	dc06      	bgt.n	8001514 <__sflush_r+0xf8>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001510:	81a3      	strh	r3, [r4, #12]
 8001512:	e790      	b.n	8001436 <__sflush_r+0x1a>
 8001514:	4407      	add	r7, r0
 8001516:	1a36      	subs	r6, r6, r0
 8001518:	e7ea      	b.n	80014f0 <__sflush_r+0xd4>
 800151a:	bf00      	nop
 800151c:	20400001 	.word	0x20400001

08001520 <_fflush_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	690b      	ldr	r3, [r1, #16]
 8001524:	4605      	mov	r5, r0
 8001526:	460c      	mov	r4, r1
 8001528:	b913      	cbnz	r3, 8001530 <_fflush_r+0x10>
 800152a:	2500      	movs	r5, #0
 800152c:	4628      	mov	r0, r5
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	b118      	cbz	r0, 800153a <_fflush_r+0x1a>
 8001532:	6983      	ldr	r3, [r0, #24]
 8001534:	b90b      	cbnz	r3, 800153a <_fflush_r+0x1a>
 8001536:	f7ff f967 	bl	8000808 <__sinit>
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <_fflush_r+0x6c>)
 800153c:	429c      	cmp	r4, r3
 800153e:	d11b      	bne.n	8001578 <_fflush_r+0x58>
 8001540:	686c      	ldr	r4, [r5, #4]
 8001542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0ef      	beq.n	800152a <_fflush_r+0xa>
 800154a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800154c:	07d0      	lsls	r0, r2, #31
 800154e:	d404      	bmi.n	800155a <_fflush_r+0x3a>
 8001550:	0599      	lsls	r1, r3, #22
 8001552:	d402      	bmi.n	800155a <_fflush_r+0x3a>
 8001554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001556:	f7ff fa07 	bl	8000968 <__retarget_lock_acquire_recursive>
 800155a:	4628      	mov	r0, r5
 800155c:	4621      	mov	r1, r4
 800155e:	f7ff ff5d 	bl	800141c <__sflush_r>
 8001562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001564:	4605      	mov	r5, r0
 8001566:	07da      	lsls	r2, r3, #31
 8001568:	d4e0      	bmi.n	800152c <_fflush_r+0xc>
 800156a:	89a3      	ldrh	r3, [r4, #12]
 800156c:	059b      	lsls	r3, r3, #22
 800156e:	d4dd      	bmi.n	800152c <_fflush_r+0xc>
 8001570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001572:	f7ff f9fa 	bl	800096a <__retarget_lock_release_recursive>
 8001576:	e7d9      	b.n	800152c <_fflush_r+0xc>
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <_fflush_r+0x70>)
 800157a:	429c      	cmp	r4, r3
 800157c:	d101      	bne.n	8001582 <_fflush_r+0x62>
 800157e:	68ac      	ldr	r4, [r5, #8]
 8001580:	e7df      	b.n	8001542 <_fflush_r+0x22>
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <_fflush_r+0x74>)
 8001584:	429c      	cmp	r4, r3
 8001586:	bf08      	it	eq
 8001588:	68ec      	ldreq	r4, [r5, #12]
 800158a:	e7da      	b.n	8001542 <_fflush_r+0x22>
 800158c:	080018fc 	.word	0x080018fc
 8001590:	0800191c 	.word	0x0800191c
 8001594:	080018dc 	.word	0x080018dc

08001598 <_lseek_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	4d05      	ldr	r5, [pc, #20]	; (80015b8 <_lseek_r+0x20>)
 80015a4:	602a      	str	r2, [r5, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f7fe ffb0 	bl	800050c <_lseek>
 80015ac:	1c43      	adds	r3, r0, #1
 80015ae:	d102      	bne.n	80015b6 <_lseek_r+0x1e>
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	b103      	cbz	r3, 80015b6 <_lseek_r+0x1e>
 80015b4:	6023      	str	r3, [r4, #0]
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
 80015b8:	200000d8 	.word	0x200000d8

080015bc <__swhatbuf_r>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	460e      	mov	r6, r1
 80015c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015c4:	4614      	mov	r4, r2
 80015c6:	2900      	cmp	r1, #0
 80015c8:	461d      	mov	r5, r3
 80015ca:	b096      	sub	sp, #88	; 0x58
 80015cc:	da08      	bge.n	80015e0 <__swhatbuf_r+0x24>
 80015ce:	2200      	movs	r2, #0
 80015d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80015d4:	602a      	str	r2, [r5, #0]
 80015d6:	061a      	lsls	r2, r3, #24
 80015d8:	d410      	bmi.n	80015fc <__swhatbuf_r+0x40>
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	e00e      	b.n	80015fe <__swhatbuf_r+0x42>
 80015e0:	466a      	mov	r2, sp
 80015e2:	f000 f8c1 	bl	8001768 <_fstat_r>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	dbf1      	blt.n	80015ce <__swhatbuf_r+0x12>
 80015ea:	9a01      	ldr	r2, [sp, #4]
 80015ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80015f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80015f4:	425a      	negs	r2, r3
 80015f6:	415a      	adcs	r2, r3
 80015f8:	602a      	str	r2, [r5, #0]
 80015fa:	e7ee      	b.n	80015da <__swhatbuf_r+0x1e>
 80015fc:	2340      	movs	r3, #64	; 0x40
 80015fe:	2000      	movs	r0, #0
 8001600:	6023      	str	r3, [r4, #0]
 8001602:	b016      	add	sp, #88	; 0x58
 8001604:	bd70      	pop	{r4, r5, r6, pc}
	...

08001608 <__smakebuf_r>:
 8001608:	898b      	ldrh	r3, [r1, #12]
 800160a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800160c:	079d      	lsls	r5, r3, #30
 800160e:	4606      	mov	r6, r0
 8001610:	460c      	mov	r4, r1
 8001612:	d507      	bpl.n	8001624 <__smakebuf_r+0x1c>
 8001614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	6123      	str	r3, [r4, #16]
 800161c:	2301      	movs	r3, #1
 800161e:	6163      	str	r3, [r4, #20]
 8001620:	b002      	add	sp, #8
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	466a      	mov	r2, sp
 8001626:	ab01      	add	r3, sp, #4
 8001628:	f7ff ffc8 	bl	80015bc <__swhatbuf_r>
 800162c:	9900      	ldr	r1, [sp, #0]
 800162e:	4605      	mov	r5, r0
 8001630:	4630      	mov	r0, r6
 8001632:	f7ff fa0b 	bl	8000a4c <_malloc_r>
 8001636:	b948      	cbnz	r0, 800164c <__smakebuf_r+0x44>
 8001638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800163c:	059a      	lsls	r2, r3, #22
 800163e:	d4ef      	bmi.n	8001620 <__smakebuf_r+0x18>
 8001640:	f023 0303 	bic.w	r3, r3, #3
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	81a3      	strh	r3, [r4, #12]
 800164a:	e7e3      	b.n	8001614 <__smakebuf_r+0xc>
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <__smakebuf_r+0x7c>)
 800164e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	6020      	str	r0, [r4, #0]
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	81a3      	strh	r3, [r4, #12]
 800165a:	9b00      	ldr	r3, [sp, #0]
 800165c:	6120      	str	r0, [r4, #16]
 800165e:	6163      	str	r3, [r4, #20]
 8001660:	9b01      	ldr	r3, [sp, #4]
 8001662:	b15b      	cbz	r3, 800167c <__smakebuf_r+0x74>
 8001664:	4630      	mov	r0, r6
 8001666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800166a:	f000 f88f 	bl	800178c <_isatty_r>
 800166e:	b128      	cbz	r0, 800167c <__smakebuf_r+0x74>
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	f023 0303 	bic.w	r3, r3, #3
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	89a0      	ldrh	r0, [r4, #12]
 800167e:	4305      	orrs	r5, r0
 8001680:	81a5      	strh	r5, [r4, #12]
 8001682:	e7cd      	b.n	8001620 <__smakebuf_r+0x18>
 8001684:	080007a1 	.word	0x080007a1

08001688 <memchr>:
 8001688:	4603      	mov	r3, r0
 800168a:	b510      	push	{r4, lr}
 800168c:	b2c9      	uxtb	r1, r1
 800168e:	4402      	add	r2, r0
 8001690:	4293      	cmp	r3, r2
 8001692:	4618      	mov	r0, r3
 8001694:	d101      	bne.n	800169a <memchr+0x12>
 8001696:	2000      	movs	r0, #0
 8001698:	e003      	b.n	80016a2 <memchr+0x1a>
 800169a:	7804      	ldrb	r4, [r0, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	428c      	cmp	r4, r1
 80016a0:	d1f6      	bne.n	8001690 <memchr+0x8>
 80016a2:	bd10      	pop	{r4, pc}

080016a4 <__malloc_lock>:
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <__malloc_lock+0x8>)
 80016a6:	f7ff b95f 	b.w	8000968 <__retarget_lock_acquire_recursive>
 80016aa:	bf00      	nop
 80016ac:	200000cc 	.word	0x200000cc

080016b0 <__malloc_unlock>:
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <__malloc_unlock+0x8>)
 80016b2:	f7ff b95a 	b.w	800096a <__retarget_lock_release_recursive>
 80016b6:	bf00      	nop
 80016b8:	200000cc 	.word	0x200000cc

080016bc <_read_r>:
 80016bc:	b538      	push	{r3, r4, r5, lr}
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	2200      	movs	r2, #0
 80016c6:	4d05      	ldr	r5, [pc, #20]	; (80016dc <_read_r+0x20>)
 80016c8:	602a      	str	r2, [r5, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f7fe fec1 	bl	8000452 <_read>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d102      	bne.n	80016da <_read_r+0x1e>
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	b103      	cbz	r3, 80016da <_read_r+0x1e>
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	bd38      	pop	{r3, r4, r5, pc}
 80016dc:	200000d8 	.word	0x200000d8

080016e0 <_raise_r>:
 80016e0:	291f      	cmp	r1, #31
 80016e2:	b538      	push	{r3, r4, r5, lr}
 80016e4:	4604      	mov	r4, r0
 80016e6:	460d      	mov	r5, r1
 80016e8:	d904      	bls.n	80016f4 <_raise_r+0x14>
 80016ea:	2316      	movs	r3, #22
 80016ec:	6003      	str	r3, [r0, #0]
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80016f6:	b112      	cbz	r2, 80016fe <_raise_r+0x1e>
 80016f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80016fc:	b94b      	cbnz	r3, 8001712 <_raise_r+0x32>
 80016fe:	4620      	mov	r0, r4
 8001700:	f000 f830 	bl	8001764 <_getpid_r>
 8001704:	462a      	mov	r2, r5
 8001706:	4601      	mov	r1, r0
 8001708:	4620      	mov	r0, r4
 800170a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800170e:	f000 b817 	b.w	8001740 <_kill_r>
 8001712:	2b01      	cmp	r3, #1
 8001714:	d00a      	beq.n	800172c <_raise_r+0x4c>
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	d103      	bne.n	8001722 <_raise_r+0x42>
 800171a:	2316      	movs	r3, #22
 800171c:	6003      	str	r3, [r0, #0]
 800171e:	2001      	movs	r0, #1
 8001720:	e7e7      	b.n	80016f2 <_raise_r+0x12>
 8001722:	2400      	movs	r4, #0
 8001724:	4628      	mov	r0, r5
 8001726:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800172a:	4798      	blx	r3
 800172c:	2000      	movs	r0, #0
 800172e:	e7e0      	b.n	80016f2 <_raise_r+0x12>

08001730 <raise>:
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <raise+0xc>)
 8001732:	4601      	mov	r1, r0
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	f7ff bfd3 	b.w	80016e0 <_raise_r>
 800173a:	bf00      	nop
 800173c:	20000044 	.word	0x20000044

08001740 <_kill_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	2300      	movs	r3, #0
 8001744:	4d06      	ldr	r5, [pc, #24]	; (8001760 <_kill_r+0x20>)
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	602b      	str	r3, [r5, #0]
 800174e:	f7fe fe66 	bl	800041e <_kill>
 8001752:	1c43      	adds	r3, r0, #1
 8001754:	d102      	bne.n	800175c <_kill_r+0x1c>
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	b103      	cbz	r3, 800175c <_kill_r+0x1c>
 800175a:	6023      	str	r3, [r4, #0]
 800175c:	bd38      	pop	{r3, r4, r5, pc}
 800175e:	bf00      	nop
 8001760:	200000d8 	.word	0x200000d8

08001764 <_getpid_r>:
 8001764:	f7fe be54 	b.w	8000410 <_getpid>

08001768 <_fstat_r>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	2300      	movs	r3, #0
 800176c:	4d06      	ldr	r5, [pc, #24]	; (8001788 <_fstat_r+0x20>)
 800176e:	4604      	mov	r4, r0
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	602b      	str	r3, [r5, #0]
 8001776:	f7fe feb0 	bl	80004da <_fstat>
 800177a:	1c43      	adds	r3, r0, #1
 800177c:	d102      	bne.n	8001784 <_fstat_r+0x1c>
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	b103      	cbz	r3, 8001784 <_fstat_r+0x1c>
 8001782:	6023      	str	r3, [r4, #0]
 8001784:	bd38      	pop	{r3, r4, r5, pc}
 8001786:	bf00      	nop
 8001788:	200000d8 	.word	0x200000d8

0800178c <_isatty_r>:
 800178c:	b538      	push	{r3, r4, r5, lr}
 800178e:	2300      	movs	r3, #0
 8001790:	4d05      	ldr	r5, [pc, #20]	; (80017a8 <_isatty_r+0x1c>)
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	602b      	str	r3, [r5, #0]
 8001798:	f7fe feae 	bl	80004f8 <_isatty>
 800179c:	1c43      	adds	r3, r0, #1
 800179e:	d102      	bne.n	80017a6 <_isatty_r+0x1a>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	b103      	cbz	r3, 80017a6 <_isatty_r+0x1a>
 80017a4:	6023      	str	r3, [r4, #0]
 80017a6:	bd38      	pop	{r3, r4, r5, pc}
 80017a8:	200000d8 	.word	0x200000d8

080017ac <_init>:
 80017ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ae:	bf00      	nop
 80017b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017b2:	bc08      	pop	{r3}
 80017b4:	469e      	mov	lr, r3
 80017b6:	4770      	bx	lr

080017b8 <_fini>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	bf00      	nop
 80017bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017be:	bc08      	pop	{r3}
 80017c0:	469e      	mov	lr, r3
 80017c2:	4770      	bx	lr
