
09_Stack_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000184  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002b4  080002bc  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002b4  080002b4  000102bc  2**0
                  CONTENTS
  4 .ARM          00000000  080002b4  080002b4  000102bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002b4  080002bc  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002b4  080002b4  000102b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002b8  080002b8  000102b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002bc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002bc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000151  00000000  00000000  000102e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000d1  00000000  00000000  00010436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f22  00000000  00000000  000105c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000479  00000000  00000000  000114e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003afd  00000000  00000000  0001195b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015458  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000154a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800029c 	.word	0x0800029c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800029c 	.word	0x0800029c

08000170 <main>:
void GenerateException(void);

void ChangeIntoPSP(void);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
    /* Loop forever */
//	uint32_t SPVal = 0x02; // 0b00000010 SEL PSP Pin

	int Result ;

	ChangeIntoPSP();
 8000176:	f000 f81d 	bl	80001b4 <ChangeIntoPSP>

	Result = Add(1, 2 , 3 , 4);
 800017a:	2304      	movs	r3, #4
 800017c:	2203      	movs	r2, #3
 800017e:	2102      	movs	r1, #2
 8000180:	2001      	movs	r0, #1
 8000182:	f000 f804 	bl	800018e <Add>
 8000186:	6078      	str	r0, [r7, #4]

	GenerateException();
 8000188:	f000 f824 	bl	80001d4 <GenerateException>

	for(;;);
 800018c:	e7fe      	b.n	800018c <main+0x1c>

0800018e <Add>:
}


int Add(int A, int B, int C, int D)
{
 800018e:	b480      	push	{r7}
 8000190:	b085      	sub	sp, #20
 8000192:	af00      	add	r7, sp, #0
 8000194:	60f8      	str	r0, [r7, #12]
 8000196:	60b9      	str	r1, [r7, #8]
 8000198:	607a      	str	r2, [r7, #4]
 800019a:	603b      	str	r3, [r7, #0]
	return A + B + C + D;
 800019c:	68fa      	ldr	r2, [r7, #12]
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	441a      	add	r2, r3
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	441a      	add	r2, r3
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	4413      	add	r3, r2
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <ChangeIntoPSP>:

void ChangeIntoPSP(void)
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	// 128k in Nucleo, 20K in bluepill
	__asm volatile(".equ SRAM_END, (0x20000000 + (20 * 1024))");
	__asm volatile(".equ STACK_PSP_END, SRAM_END - 512");

	/* Initialize PSP with valid stack pointer value */
	__asm volatile("LDR R0, =STACK_PSP_END");
 80001b8:	4805      	ldr	r0, [pc, #20]	; (80001d0 <ChangeIntoPSP+0x1c>)
	__asm volatile("MSR PSP, R0");
 80001ba:	f380 8809 	msr	PSP, r0

	/*2- Link SP to PSP */
//	__asm volatile("MSR CONTROL, %0"::"r"(SPVal));

	__asm volatile("LDR R0, =#2");
 80001be:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");
 80001c2:	f380 8814 	msr	CONTROL, r0
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	0000      	.short	0x0000
 80001d0:	20004e00 	.word	0x20004e00

080001d4 <GenerateException>:

void GenerateException(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	__asm volatile ("SVC #0x2");
 80001d8:	df02      	svc	2
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr

080001e2 <SVC_Handler>:

void SVC_Handler(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b082      	sub	sp, #8
 80001e6:	af00      	add	r7, sp, #0
	//
	int Result ;
	Result = Add(1, 2 , 3 , 4);
 80001e8:	2304      	movs	r3, #4
 80001ea:	2203      	movs	r2, #3
 80001ec:	2102      	movs	r1, #2
 80001ee:	2001      	movs	r0, #1
 80001f0:	f7ff ffcd 	bl	800018e <Add>
 80001f4:	6078      	str	r0, [r7, #4]
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
	...

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 f811 	bl	8000254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ff9d 	bl	8000170 <main>

08000236 <LoopForever>:

LoopForever:
  b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	080002bc 	.word	0x080002bc
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	2000001c 	.word	0x2000001c

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <__libc_init_array>:
 8000254:	b570      	push	{r4, r5, r6, lr}
 8000256:	2600      	movs	r6, #0
 8000258:	4d0c      	ldr	r5, [pc, #48]	; (800028c <__libc_init_array+0x38>)
 800025a:	4c0d      	ldr	r4, [pc, #52]	; (8000290 <__libc_init_array+0x3c>)
 800025c:	1b64      	subs	r4, r4, r5
 800025e:	10a4      	asrs	r4, r4, #2
 8000260:	42a6      	cmp	r6, r4
 8000262:	d109      	bne.n	8000278 <__libc_init_array+0x24>
 8000264:	f000 f81a 	bl	800029c <_init>
 8000268:	2600      	movs	r6, #0
 800026a:	4d0a      	ldr	r5, [pc, #40]	; (8000294 <__libc_init_array+0x40>)
 800026c:	4c0a      	ldr	r4, [pc, #40]	; (8000298 <__libc_init_array+0x44>)
 800026e:	1b64      	subs	r4, r4, r5
 8000270:	10a4      	asrs	r4, r4, #2
 8000272:	42a6      	cmp	r6, r4
 8000274:	d105      	bne.n	8000282 <__libc_init_array+0x2e>
 8000276:	bd70      	pop	{r4, r5, r6, pc}
 8000278:	f855 3b04 	ldr.w	r3, [r5], #4
 800027c:	4798      	blx	r3
 800027e:	3601      	adds	r6, #1
 8000280:	e7ee      	b.n	8000260 <__libc_init_array+0xc>
 8000282:	f855 3b04 	ldr.w	r3, [r5], #4
 8000286:	4798      	blx	r3
 8000288:	3601      	adds	r6, #1
 800028a:	e7f2      	b.n	8000272 <__libc_init_array+0x1e>
 800028c:	080002b4 	.word	0x080002b4
 8000290:	080002b4 	.word	0x080002b4
 8000294:	080002b4 	.word	0x080002b4
 8000298:	080002b8 	.word	0x080002b8

0800029c <_init>:
 800029c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800029e:	bf00      	nop
 80002a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002a2:	bc08      	pop	{r3}
 80002a4:	469e      	mov	lr, r3
 80002a6:	4770      	bx	lr

080002a8 <_fini>:
 80002a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002aa:	bf00      	nop
 80002ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ae:	bc08      	pop	{r3}
 80002b0:	469e      	mov	lr, r3
 80002b2:	4770      	bx	lr
