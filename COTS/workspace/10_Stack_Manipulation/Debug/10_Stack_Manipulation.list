
10_Stack_Manipulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000130  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000260  08000268  00010268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000260  08000260  00010268  2**0
                  CONTENTS
  4 .ARM          00000000  08000260  08000260  00010268  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000260  08000268  00010268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000260  08000260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000264  08000264  00010264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000268  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000268  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000107  00000000  00000000  00010291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000009b  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00010438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  00010488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f22  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000426  00000000  00000000  000113e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ace  00000000  00000000  00011808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000152d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  00015328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000248 	.word	0x08000248

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000248 	.word	0x08000248

08000170 <main>:

#include <stdint.h>

int Add(int A, int B, int C, int D);
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	int res;
	res = Add(1, 2, 3, 4);
 8000176:	2304      	movs	r3, #4
 8000178:	2203      	movs	r2, #3
 800017a:	2102      	movs	r1, #2
 800017c:	2001      	movs	r0, #1
 800017e:	f000 f802 	bl	8000186 <Add>
 8000182:	6078      	str	r0, [r7, #4]

    /* Loop forever */
	for(;;);
 8000184:	e7fe      	b.n	8000184 <main+0x14>

08000186 <Add>:
}

int Add(int A, int B, int C, int D)
{
 8000186:	b480      	push	{r7}
 8000188:	b085      	sub	sp, #20
 800018a:	af00      	add	r7, sp, #0
 800018c:	60f8      	str	r0, [r7, #12]
 800018e:	60b9      	str	r1, [r7, #8]
 8000190:	607a      	str	r2, [r7, #4]
 8000192:	603b      	str	r3, [r7, #0]
	return A + B + C + D;
 8000194:	68fa      	ldr	r2, [r7, #12]
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	441a      	add	r2, r3
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	441a      	add	r2, r3
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	4413      	add	r3, r2
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr

080001ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80001b6:	490d      	ldr	r1, [pc, #52]	; (80001ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <LoopForever+0xe>)
  movs r3, #0
 80001ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001bc:	e002      	b.n	80001c4 <LoopCopyDataInit>

080001be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001c2:	3304      	adds	r3, #4

080001c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c8:	d3f9      	bcc.n	80001be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001cc:	4c0a      	ldr	r4, [pc, #40]	; (80001f8 <LoopForever+0x16>)
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d0:	e001      	b.n	80001d6 <LoopFillZerobss>

080001d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d4:	3204      	adds	r2, #4

080001d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d8:	d3fb      	bcc.n	80001d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001da:	f000 f811 	bl	8000200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001de:	f7ff ffc7 	bl	8000170 <main>

080001e2 <LoopForever>:

LoopForever:
  b LoopForever
 80001e2:	e7fe      	b.n	80001e2 <LoopForever>
  ldr   r0, =_estack
 80001e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80001e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001f0:	08000268 	.word	0x08000268
  ldr r2, =_sbss
 80001f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001f8:	2000001c 	.word	0x2000001c

080001fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001fc:	e7fe      	b.n	80001fc <ADC1_2_IRQHandler>
	...

08000200 <__libc_init_array>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	2600      	movs	r6, #0
 8000204:	4d0c      	ldr	r5, [pc, #48]	; (8000238 <__libc_init_array+0x38>)
 8000206:	4c0d      	ldr	r4, [pc, #52]	; (800023c <__libc_init_array+0x3c>)
 8000208:	1b64      	subs	r4, r4, r5
 800020a:	10a4      	asrs	r4, r4, #2
 800020c:	42a6      	cmp	r6, r4
 800020e:	d109      	bne.n	8000224 <__libc_init_array+0x24>
 8000210:	f000 f81a 	bl	8000248 <_init>
 8000214:	2600      	movs	r6, #0
 8000216:	4d0a      	ldr	r5, [pc, #40]	; (8000240 <__libc_init_array+0x40>)
 8000218:	4c0a      	ldr	r4, [pc, #40]	; (8000244 <__libc_init_array+0x44>)
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	10a4      	asrs	r4, r4, #2
 800021e:	42a6      	cmp	r6, r4
 8000220:	d105      	bne.n	800022e <__libc_init_array+0x2e>
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f855 3b04 	ldr.w	r3, [r5], #4
 8000228:	4798      	blx	r3
 800022a:	3601      	adds	r6, #1
 800022c:	e7ee      	b.n	800020c <__libc_init_array+0xc>
 800022e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000232:	4798      	blx	r3
 8000234:	3601      	adds	r6, #1
 8000236:	e7f2      	b.n	800021e <__libc_init_array+0x1e>
 8000238:	08000260 	.word	0x08000260
 800023c:	08000260 	.word	0x08000260
 8000240:	08000260 	.word	0x08000260
 8000244:	08000264 	.word	0x08000264

08000248 <_init>:
 8000248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024a:	bf00      	nop
 800024c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800024e:	bc08      	pop	{r3}
 8000250:	469e      	mov	lr, r3
 8000252:	4770      	bx	lr

08000254 <_fini>:
 8000254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000256:	bf00      	nop
 8000258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025a:	bc08      	pop	{r3}
 800025c:	469e      	mov	lr, r3
 800025e:	4770      	bx	lr
